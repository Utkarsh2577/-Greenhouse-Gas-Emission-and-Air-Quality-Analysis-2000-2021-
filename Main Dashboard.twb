<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20243.24.1112.0850                               -->
<workbook original-version='18.1' source-build='2024.3.1 (20243.24.1112.0850)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
    <ZoneFriendlyName />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Test (2)' inline='true' name='federated.1ncple71yw630v177y4xk14h29ts' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='localhost' name='postgres.0yl13n80h6evvx1ajapi00wu8oeo'>
            <connection authentication='username-password' class='postgres' dbname='Test' one-time-sql='' port='5432' server='localhost' username='postgres' />
          </named-connection>
        </named-connections>
        <relation type='collection'>
          <relation connection='postgres.0yl13n80h6evvx1ajapi00wu8oeo' name='Emission' table='[public].[Emission]' type='table'>
            <columns>
              <column datatype='date' date-parse-format='yyyy' name='Year' />
            </columns>
          </relation>
          <relation connection='postgres.0yl13n80h6evvx1ajapi00wu8oeo' name='Aqi' table='[public].[Aqi]' type='table' />
          <relation connection='postgres.0yl13n80h6evvx1ajapi00wu8oeo' name='greenhouse' table='[public].[greenhouse]' type='table'>
            <columns>
              <column datatype='date' date-parse-format='yyyy' name='year' />
            </columns>
          </relation>
        </relation>
        <cols>
          <map key='[AQI Category]' value='[Aqi].[AQI Category]' />
          <map key='[AQI Value]' value='[Aqi].[AQI Value]' />
          <map key='[CO AQI Category]' value='[Aqi].[CO AQI Category]' />
          <map key='[CO AQI Value]' value='[Aqi].[CO AQI Value]' />
          <map key='[Coal]' value='[Emission].[Coal]' />
          <map key='[Country (Aqi)]' value='[Aqi].[Country]' />
          <map key='[Country]' value='[Emission].[Country]' />
          <map key='[Country_Code]' value='[Aqi].[Country_Code]' />
          <map key='[Country_codes]' value='[Emission].[Country_codes]' />
          <map key='[Gas]' value='[Emission].[Gas]' />
          <map key='[NO2 AQI Category]' value='[Aqi].[NO2 AQI Category]' />
          <map key='[NO2 AQI Value]' value='[Aqi].[NO2 AQI Value]' />
          <map key='[Oil]' value='[Emission].[Oil]' />
          <map key='[Ozone AQI Category]' value='[Aqi].[Ozone AQI Category]' />
          <map key='[Ozone AQI Value]' value='[Aqi].[Ozone AQI Value]' />
          <map key='[PM2.5 AQI Category]' value='[Aqi].[PM2.5 AQI Category]' />
          <map key='[PM2.5 AQI Value]' value='[Aqi].[PM2.5 AQI Value]' />
          <map key='[Per Capita]' value='[Emission].[Per Capita]' />
          <map key='[Total]' value='[Emission].[Total]' />
          <map key='[Year]' value='[Emission].[Year]' />
          <map key='[_id]' value='[greenhouse].[_id]' />
          <map key='[country]' value='[greenhouse].[country]' />
          <map key='[country_code]' value='[greenhouse].[country_code]' />
          <map key='[ipcc_annex]' value='[greenhouse].[ipcc_annex]' />
          <map key='[substance]' value='[greenhouse].[substance]' />
          <map key='[unit]' value='[greenhouse].[unit]' />
          <map key='[value]' value='[greenhouse].[value]' />
          <map key='[year]' value='[greenhouse].[year]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Emission]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[Emission_B906FA425BED48D0A523FE9424FEA965]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country_codes</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country_codes]</local-name>
            <parent-name>[Emission]</parent-name>
            <remote-alias>Country_codes</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[Emission_B906FA425BED48D0A523FE9424FEA965]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[Emission]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>2</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <object-id>[Emission_B906FA425BED48D0A523FE9424FEA965]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Total]</local-name>
            <parent-name>[Emission]</parent-name>
            <remote-alias>Total</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <object-id>[Emission_B906FA425BED48D0A523FE9424FEA965]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Coal</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Coal]</local-name>
            <parent-name>[Emission]</parent-name>
            <remote-alias>Coal</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <object-id>[Emission_B906FA425BED48D0A523FE9424FEA965]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Oil</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Oil]</local-name>
            <parent-name>[Emission]</parent-name>
            <remote-alias>Oil</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <object-id>[Emission_B906FA425BED48D0A523FE9424FEA965]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gas</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gas]</local-name>
            <parent-name>[Emission]</parent-name>
            <remote-alias>Gas</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <object-id>[Emission_B906FA425BED48D0A523FE9424FEA965]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Per Capita</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Per Capita]</local-name>
            <parent-name>[Emission]</parent-name>
            <remote-alias>Per Capita</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <object-id>[Emission_B906FA425BED48D0A523FE9424FEA965]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country (Aqi)]</local-name>
            <parent-name>[Aqi]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[Aqi_25D0220968D446BAA1C94CF7F3E283D1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AQI Value</remote-name>
            <remote-type>20</remote-type>
            <local-name>[AQI Value]</local-name>
            <parent-name>[Aqi]</parent-name>
            <remote-alias>AQI Value</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <object-id>[Aqi_25D0220968D446BAA1C94CF7F3E283D1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>AQI Category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[AQI Category]</local-name>
            <parent-name>[Aqi]</parent-name>
            <remote-alias>AQI Category</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[Aqi_25D0220968D446BAA1C94CF7F3E283D1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CO AQI Value</remote-name>
            <remote-type>20</remote-type>
            <local-name>[CO AQI Value]</local-name>
            <parent-name>[Aqi]</parent-name>
            <remote-alias>CO AQI Value</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <object-id>[Aqi_25D0220968D446BAA1C94CF7F3E283D1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CO AQI Category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[CO AQI Category]</local-name>
            <parent-name>[Aqi]</parent-name>
            <remote-alias>CO AQI Category</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[Aqi_25D0220968D446BAA1C94CF7F3E283D1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ozone AQI Value</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Ozone AQI Value]</local-name>
            <parent-name>[Aqi]</parent-name>
            <remote-alias>Ozone AQI Value</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <object-id>[Aqi_25D0220968D446BAA1C94CF7F3E283D1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ozone AQI Category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Ozone AQI Category]</local-name>
            <parent-name>[Aqi]</parent-name>
            <remote-alias>Ozone AQI Category</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[Aqi_25D0220968D446BAA1C94CF7F3E283D1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NO2 AQI Value</remote-name>
            <remote-type>20</remote-type>
            <local-name>[NO2 AQI Value]</local-name>
            <parent-name>[Aqi]</parent-name>
            <remote-alias>NO2 AQI Value</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <object-id>[Aqi_25D0220968D446BAA1C94CF7F3E283D1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>NO2 AQI Category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[NO2 AQI Category]</local-name>
            <parent-name>[Aqi]</parent-name>
            <remote-alias>NO2 AQI Category</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[Aqi_25D0220968D446BAA1C94CF7F3E283D1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PM2.5 AQI Value</remote-name>
            <remote-type>20</remote-type>
            <local-name>[PM2.5 AQI Value]</local-name>
            <parent-name>[Aqi]</parent-name>
            <remote-alias>PM2.5 AQI Value</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>19</precision>
            <contains-null>true</contains-null>
            <object-id>[Aqi_25D0220968D446BAA1C94CF7F3E283D1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PM2.5 AQI Category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[PM2.5 AQI Category]</local-name>
            <parent-name>[Aqi]</parent-name>
            <remote-alias>PM2.5 AQI Category</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[Aqi_25D0220968D446BAA1C94CF7F3E283D1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country_Code</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country_Code]</local-name>
            <parent-name>[Aqi]</parent-name>
            <remote-alias>Country_Code</remote-alias>
            <ordinal>20</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[Aqi_25D0220968D446BAA1C94CF7F3E283D1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>_id</remote-name>
            <remote-type>129</remote-type>
            <local-name>[_id]</local-name>
            <parent-name>[greenhouse]</parent-name>
            <remote-alias>_id</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[greenhouse_B464B852BC3544C999C50D450D60FB11]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>7</remote-type>
            <local-name>[year]</local-name>
            <parent-name>[greenhouse]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>22</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <object-id>[greenhouse_B464B852BC3544C999C50D450D60FB11]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[greenhouse]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>23</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[greenhouse_B464B852BC3544C999C50D450D60FB11]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>substance</remote-name>
            <remote-type>129</remote-type>
            <local-name>[substance]</local-name>
            <parent-name>[greenhouse]</parent-name>
            <remote-alias>substance</remote-alias>
            <ordinal>24</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[greenhouse_B464B852BC3544C999C50D450D60FB11]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ipcc_annex</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ipcc_annex]</local-name>
            <parent-name>[greenhouse]</parent-name>
            <remote-alias>ipcc_annex</remote-alias>
            <ordinal>25</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[greenhouse_B464B852BC3544C999C50D450D60FB11]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>value</remote-name>
            <remote-type>5</remote-type>
            <local-name>[value]</local-name>
            <parent-name>[greenhouse]</parent-name>
            <remote-alias>value</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>17</precision>
            <contains-null>true</contains-null>
            <object-id>[greenhouse_B464B852BC3544C999C50D450D60FB11]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>unit</remote-name>
            <remote-type>129</remote-type>
            <local-name>[unit]</local-name>
            <parent-name>[greenhouse]</parent-name>
            <remote-alias>unit</remote-alias>
            <ordinal>27</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[greenhouse_B464B852BC3544C999C50D450D60FB11]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country_code</remote-name>
            <remote-type>129</remote-type>
            <local-name>[country_code]</local-name>
            <parent-name>[greenhouse]</parent-name>
            <remote-alias>country_code</remote-alias>
            <ordinal>28</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>2147483647</width>
            <contains-null>true</contains-null>
            <cast-to-local-type>true</cast-to-local-type>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
            <object-id>[greenhouse_B464B852BC3544C999C50D450D60FB11]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[AQI Value]' role='measure' type='quantitative' />
      <column datatype='integer' name='[CO AQI Value]' role='measure' type='quantitative' />
      <column datatype='string' name='[Country (Aqi)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Country Code1' datatype='string' name='[Country_Code]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Country codes' datatype='string' name='[Country_codes]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[NO2 AQI Value]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Ozone AQI Value]' role='measure' type='quantitative' />
      <column datatype='integer' name='[PM2.5 AQI Value]' role='measure' type='quantitative' />
      <column datatype='real' name='[Per Capita]' role='measure' type='quantitative' />
      <column datatype='real' name='[Total]' role='measure' type='quantitative' />
      <column datatype='date' datatype-customized='true' name='[Year]' role='dimension' type='quantitative' />
      <column caption='Aqi' datatype='table' name='[__tableau_internal_object_id__].[Aqi_25D0220968D446BAA1C94CF7F3E283D1]' role='measure' type='quantitative' />
      <column caption='Emission' datatype='table' name='[__tableau_internal_object_id__].[Emission_B906FA425BED48D0A523FE9424FEA965]' role='measure' type='quantitative' />
      <column caption='greenhouse' datatype='table' name='[__tableau_internal_object_id__].[greenhouse_B464B852BC3544C999C50D450D60FB11]' role='measure' type='quantitative' />
      <column caption='_Id' datatype='string' name='[_id]' role='dimension' type='nominal' />
      <column caption='Country1' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Country Code' datatype='string' name='[country_code]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Ipcc Annex' datatype='string' name='[ipcc_annex]' role='dimension' type='nominal' />
      <column caption='Substance' datatype='string' datatype-customized='true' name='[substance]' role='dimension' type='nominal' />
      <column caption='Unit' datatype='string' name='[unit]' role='dimension' type='nominal' />
      <column caption='Value' datatype='real' name='[value]' role='measure' type='quantitative' />
      <column caption='Year1' datatype='date' datatype-customized='true' name='[year]' role='dimension' type='quantitative' />
      <column-instance column='[AQI Value]' derivation='Avg' name='[avg:AQI Value:qk]' pivot='key' type='quantitative' />
      <column-instance column='[CO AQI Value]' derivation='Avg' name='[avg:CO AQI Value:qk]' pivot='key' type='quantitative' />
      <column-instance column='[NO2 AQI Value]' derivation='Avg' name='[avg:NO2 AQI Value:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Ozone AQI Value]' derivation='Avg' name='[avg:Ozone AQI Value:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PM2.5 AQI Value]' derivation='Avg' name='[avg:PM2.5 AQI Value:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Per Capita]' derivation='Avg' name='[avg:Per Capita:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Total]' derivation='Avg' name='[avg:Total:qk]' pivot='key' type='quantitative' />
      <column-instance column='[value]' derivation='Avg' name='[avg:value:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Action (Country (Aqi))]' derivation='InOut' name='[io:Action (Country (Aqi)):nk]' pivot='key' type='nominal' />
      <column-instance column='[AQI Value]' derivation='Max' name='[max:AQI Value:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PM2.5 AQI Value]' derivation='Max' name='[max:PM2.5 AQI Value:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Country (Aqi)]' derivation='None' name='[none:Country (Aqi):nk]' pivot='key' type='nominal' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <column-instance column='[AQI Value]' derivation='Sum' name='[sum:AQI Value:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PM2.5 AQI Value]' derivation='Sum' name='[sum:PM2.5 AQI Value:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Per Capita]' derivation='Sum' name='[sum:Per Capita:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Total]' derivation='Sum' name='[sum:Total:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Year]' derivation='Year-Trunc' name='[tyr:Year:ok]' pivot='key' type='ordinal' />
      <group caption='Action (Country (Aqi))' hidden='true' name='[Action (Country (Aqi))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country (Aqi)]' />
        </groupfilter>
      </group>
      <group caption='Action (Country)' hidden='true' name='[Action (Country)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country]' />
        </groupfilter>
      </group>
      <group caption='Action (Country,YEAR(Year))' hidden='true' name='[Action (Country,YEAR(Year))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country]' />
          <groupfilter function='level-members' level='[tyr:Year:ok]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts].[max:AQI Value:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts].[sum:AQI Value:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts].[avg:Ozone AQI Value:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts].[sum:Per Capita:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts].[sum:Total:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts].[avg:NO2 AQI Value:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts].[avg:PM2.5 AQI Value:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts].[max:PM2.5 AQI Value:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts].[sum:PM2.5 AQI Value:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts].[avg:CO AQI Value:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Korea, Democratic People&apos;s Republic of&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;The Gambia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Virgin Islands_British&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;International Aviation&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lao People&apos;s Democratic Republic&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Saint Helena, Ascension and Tristan da Cunha&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Spain and Andorra&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Faroe Islands&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Myanmar/Burma&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Côte d’Ivoire&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;EU27&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Congo_the Democratic Republic of the&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;International Shipping&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Réunion&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tanzania_United Republic of&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Viet Nam&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Korea, Republic of&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Russian Federation&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Western Sahara&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Democratic Republic of the Congo&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Netherlands Antilles&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;GLOBAL TOTAL&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Faroes&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Italy, San Marino and the Holy See&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Serbia and Montenegro&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Syrian Arab Republic&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;France and Monaco&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Reunion&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;São Tomé and Príncipe&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Iran, Islamic Republic of&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Moldova, Republic of&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saint Pierre and Miquelon&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sudan and South Sudan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Int. Aviation&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;North Korea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Macedonia, the former Yugoslav Republic of&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Taiwan_Province of China&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Falkland Islands (Malvinas)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Israel and Palestine, State of&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Libyan Arab Jamahiriya&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Switzerland and Liechtenstein&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Int. Shipping&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[io:Action (Country (Aqi)):nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>true</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country (Aqi):nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Republic of North Macedonia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;State of Palestine&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lao People&apos;s Democratic Republic&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;United Kingdom of Great Britain and Northern Ireland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;United Republic of Tanzania&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Côte d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kingdom of Eswatini&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Republic of Korea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;United States of America&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Syrian Arab Republic&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bolivia (Plurinational State of)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Russian Federation&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Venezuela (Bolivarian Republic of)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Republic of Moldova&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Iran (Islamic Republic of)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Viet Nam&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Democratic Republic of the Congo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='shape' field='[none:country:nk]' type='shape'>
            <map to='asterisk'>
              <bucket>&quot;Int. Shipping&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Iran, Islamic Republic of&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Korea, Republic of&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Russian Federation&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]&#10;[:Measure Names]' type='palette'>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Canada&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Malta&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Panama&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Chile&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;France&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Italy&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Mali&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Palau&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_brown_10_0'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Angola&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Greece&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;India&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Niger&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Peru&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Spain&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Benin&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Norway&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;USA&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Germany&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Libya&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;China&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Laos&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Syria&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Australia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Côte d&apos;Ivoire&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Oman&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;Viet Nam&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Albania&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Austria&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Chad&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Finland&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Israel&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Romania&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_purple_10_0'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Belize&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Congo&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Poland&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Russia&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;St. Kitts-Nevis-Anguilla&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Togo&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Japan&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map-pri>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Côte d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sint Maarten (Dutch part)&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Wallis and Futuna Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mayotte&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;North Korea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kuwaiti Oil Fires&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bonaire, Saint Eustatius and Saba&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Saint Pierre and Miquelon&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;St. Kitts-Nevis-Anguilla&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Panama Canal Zone&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Antarctica&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;French West Africa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Democratic Republic of the Congo&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Leeward Islands&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Micronesia (Federated States of)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ryukyu Islands&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Pacific Islands (Palau)&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Global&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;French Equatorial Africa&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Réunion&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Viet Nam&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Christmas Island&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;International Transport&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Occupied Palestinian Territory&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <object-graph>
        <objects>
          <object caption='Aqi' id='Aqi_25D0220968D446BAA1C94CF7F3E283D1'>
            <properties context=''>
              <relation connection='postgres.0yl13n80h6evvx1ajapi00wu8oeo' name='Aqi' table='[public].[Aqi]' type='table' />
            </properties>
          </object>
          <object caption='Emission' id='Emission_B906FA425BED48D0A523FE9424FEA965'>
            <properties context=''>
              <relation connection='postgres.0yl13n80h6evvx1ajapi00wu8oeo' name='Emission' table='[public].[Emission]' type='table'>
                <columns>
                  <column datatype='date' date-parse-format='yyyy' name='Year' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='greenhouse' id='greenhouse_B464B852BC3544C999C50D450D60FB11'>
            <properties context=''>
              <relation connection='postgres.0yl13n80h6evvx1ajapi00wu8oeo' name='greenhouse' table='[public].[greenhouse]' type='table'>
                <columns>
                  <column datatype='date' date-parse-format='yyyy' name='year' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[Country_codes]' />
              <expression op='[Country_Code]' />
            </expression>
            <first-end-point object-id='Emission_B906FA425BED48D0A523FE9424FEA965' />
            <second-end-point object-id='Aqi_25D0220968D446BAA1C94CF7F3E283D1' />
          </relationship>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[Country_codes]' />
                <expression op='[country_code]' />
              </expression>
              <expression op='='>
                <expression op='[Year]' />
                <expression op='[year]' />
              </expression>
            </expression>
            <first-end-point object-id='Emission_B906FA425BED48D0A523FE9424FEA965' />
            <second-end-point object-id='greenhouse_B464B852BC3544C999C50D450D60FB11' />
          </relationship>
        </relationships>
      </object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter 1 (generated)' name='[Action1_DFE9F86ABC174E4BA87BB4DAB0544088]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='top 10 with bad emission' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 2 (generated)' name='[Action2_685001320E0D400391970AAA58779127]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Good green house' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 1 (generated) 1' name='[Action3_10B2C6AC8DAA428BAB7321954717A45E]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1 (2)' type='sheet' worksheet='top 10 with bad emission' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1 (2)' />
      </command>
    </action>
    <action caption='Filter 2 (generated) 1' name='[Action4_95E8775CC7DE4685BF072BBA718E491C]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1 (2)' type='sheet' worksheet='Good green house' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1 (2)' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='BAd coutries percapita'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Top 10 Countries with BAD Emission</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Test (2)' name='federated.1ncple71yw630v177y4xk14h29ts' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ncple71yw630v177y4xk14h29ts'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Per Capita]' role='measure' type='quantitative' />
            <column datatype='real' name='[Total]' role='measure' type='quantitative' />
            <column datatype='date' datatype-customized='true' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Per Capita]' derivation='Avg' name='[avg:Per Capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total]' derivation='Avg' name='[avg:Total:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action1_DFE9F86ABC174E4BA87BB4DAB0544088]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([Total])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:Country:nk]' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:Country:nk]' member='&quot;Global&quot;' />
                    <groupfilter function='member' level='[none:Country:nk]' member='&quot;International Transport&quot;' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Global&quot;</bucket>
              <bucket>&quot;China&quot;</bucket>
              <bucket>&quot;USA&quot;</bucket>
              <bucket>&quot;India&quot;</bucket>
              <bucket>&quot;Russia&quot;</bucket>
              <bucket>&quot;International Transport&quot;</bucket>
              <bucket>&quot;Japan&quot;</bucket>
              <bucket>&quot;Germany&quot;</bucket>
              <bucket>&quot;South Korea&quot;</bucket>
              <bucket>&quot;Canada&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <filter class='quantitative' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]' included-values='in-range'>
            <min>#2015-01-01#</min>
            <max>#2021-01-01#</max>
          </filter>
          <slices>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[:Measure Names]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]' palette='red_gold_10_0' type='interpolated' />
            <encoding attr='color' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' palette='orange_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='admin-2-boundaries-bg' value='true' />
            <format attr='enabled' id='admin-2-boundaries' value='true' />
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='light' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1ncple71yw630v177y4xk14h29ts].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]</rows>
        <cols>[federated.1ncple71yw630v177y4xk14h29ts].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{52077B67-460D-4D29-B341-5AA29BC2AA21}' />
    </worksheet>
    <worksheet name='BAd coutries percapita (2)'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Index</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Test (2)' name='federated.1ncple71yw630v177y4xk14h29ts' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ncple71yw630v177y4xk14h29ts'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Per Capita]' role='measure' type='quantitative' />
            <column datatype='real' name='[Total]' role='measure' type='quantitative' />
            <column datatype='date' datatype-customized='true' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Per Capita]' derivation='Avg' name='[avg:Per Capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total]' derivation='Avg' name='[avg:Total:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action1_DFE9F86ABC174E4BA87BB4DAB0544088]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([Total])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:Country:nk]' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Global&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]' included-values='in-range'>
            <min>#2015-01-01#</min>
            <max>#2021-01-01#</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='20' />
            <format attr='cell-h' value='20' />
            <format attr='cell' value='20' />
            <format attr='cell-q' value='100' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]' palette='red_gold_10_0' type='interpolated' />
            <encoding attr='color' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' palette='orange_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='admin-2-boundaries-bg' value='true' />
            <format attr='enabled' id='admin-2-boundaries' value='true' />
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='light' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' />
              <color column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.7999999523162842' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{143EFF67-724F-48D5-B76B-F1F08E28B084}' />
    </worksheet>
    <worksheet name='BAd green house'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Top countries with high greenhouse value (in Kt) by Per capita</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Test (2)' name='federated.1ncple71yw630v177y4xk14h29ts' />
          </datasources>
          <datasource-dependencies datasource='federated.1ncple71yw630v177y4xk14h29ts'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Per Capita]' role='measure' type='quantitative' />
            <column-instance column='[Per Capita]' derivation='Avg' name='[avg:Per Capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[value]' derivation='Avg' name='[avg:value:qk]' pivot='key' type='quantitative' />
            <column caption='Country1' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[unit]' derivation='None' name='[none:unit:nk]' pivot='key' type='nominal' />
            <column-instance column='[year]' derivation='None' name='[none:year:qk]' pivot='key' type='quantitative' />
            <column caption='Unit' datatype='string' name='[unit]' role='dimension' type='nominal' />
            <column caption='Value' datatype='real' name='[value]' role='measure' type='quantitative' />
            <column caption='Year1' datatype='date' datatype-customized='true' name='[year]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action3_10B2C6AC8DAA428BAB7321954717A45E]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:country:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([value])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Albania&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Algeria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Angola&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Anguilla&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Antigua and Barbuda&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Armenia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Aruba&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bahamas&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Barbados&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Belize&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Benin&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bermuda&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bhutan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bolivia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bosnia and Herzegovina&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Botswana&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Brunei&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Brunei Darussalam&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Burkina Faso&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Burundi&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cabo Verde&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cameroon&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cape Verde&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cayman Islands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Central African Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Chad&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Comoros&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Congo&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Congo_the Democratic Republic of the&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cook Islands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Costa Rica&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cote d&apos;Ivoire&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cuba&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Curaçao&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Czechia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Djibouti&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Dominica&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Dominican Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ecuador&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;El Salvador&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Equatorial Guinea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Eritrea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Estonia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Eswatini&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;EU27&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Falkland Islands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Faroe Islands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Faroes&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Fiji&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France and Monaco&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;French Guiana&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;French Polynesia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Gabon&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Gambia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Georgia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ghana&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Gibraltar&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;GLOBAL TOTAL&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Greenland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Grenada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Guadeloupe&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Guinea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Guinea-Bissau&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Guyana&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Haiti&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Honduras&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Iceland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Int. Shipping&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;International Aviation&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;International Shipping&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Iran, Islamic Republic of&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Iraq&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Israel and Palestine, State of&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, San Marino and the Holy See&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Jamaica&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Kiribati&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Korea, Democratic People&apos;s Republic of&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Korea, Republic of&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Kyrgyzstan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lao People&apos;s Democratic Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Laos&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lesotho&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Liberia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Libya&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Libyan Arab Jamahiriya&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Macao&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Madagascar&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Malawi&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mali&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Martinique&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mauritania&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Moldova&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Moldova, Republic of&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Morocco&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mozambique&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Myanmar/Burma&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Namibia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Netherlands Antilles&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;New Caledonia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Nicaragua&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Niger&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;North Korea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;North Macedonia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Palau&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Panama&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Papua New Guinea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Paraguay&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Puerto Rico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Reunion&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Réunion&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Russian Federation&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Rwanda&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saint Helena&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saint Helena, Ascension and Tristan da Cunha&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saint Kitts and Nevis&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saint Lucia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saint Pierre and Miquelon&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Samoa&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;São Tomé and Príncipe&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Senegal&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Serbia and Montenegro&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Seychelles&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Sierra Leone&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Somalia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Korea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain and Andorra&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Sri Lanka&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Sudan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Sudan and South Sudan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Suriname&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Switzerland and Liechtenstein&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Syria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Syrian Arab Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Taiwan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Taiwan_Province of China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Tajikistan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Tanzania&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Tanzania_United Republic of&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;The Gambia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Timor-Leste&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Togo&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Tonga&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Tunisia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Turkmenistan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Uganda&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Uruguay&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Uzbekistan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Vanuatu&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Venezuela&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Viet Nam&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Vietnam&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Virgin Islands_British&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Western Sahara&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Yemen&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Zambia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:unit:nk]'>
            <groupfilter function='member' level='[none:unit:nk]' member='&quot;kt&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:year:qk]' included-values='in-range'>
            <min>#2015-01-01#</min>
            <max>#2021-01-01#</max>
          </filter>
          <slices>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:year:qk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:country:nk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:unit:nk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' palette='red_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <size column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' />
              <text column='[federated.1ncple71yw630v177y4xk14h29ts].[none:country:nk]' />
              <text column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' />
              <color column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{FB7033FF-D72F-40B6-944F-5925D2E46104}' />
    </worksheet>
    <worksheet name='Good AQI'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Top 10 countries of low AQI with  per capita</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Test (2)' name='federated.1ncple71yw630v177y4xk14h29ts' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ncple71yw630v177y4xk14h29ts'>
            <column datatype='integer' name='[AQI Value]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country (Aqi)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Per Capita]' role='measure' type='quantitative' />
            <column datatype='date' datatype-customized='true' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[AQI Value]' derivation='Avg' name='[avg:AQI Value:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Per Capita]' derivation='Avg' name='[avg:Per Capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country (Aqi)]' derivation='None' name='[none:Country (Aqi):nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action3_10B2C6AC8DAA428BAB7321954717A45E]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]'>
            <groupfilter count='10' end='bottom' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([AQI Value])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:Country (Aqi):nk]' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='%null%' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]' included-values='in-range'>
            <min>#2015-01-01#</min>
            <max>#2021-01-01#</max>
          </filter>
          <slices>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='stroke-color' id='refline0' value='#000000' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='div-level' scope='rows' value='10' />
            <format attr='div-level' scope='cols' value='10' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='light' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' />
            </encodings>
            <reference-line axis-column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='none' probability='95' scope='per-cell' value-column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' z-order='2' />
            <reference-line axis-column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' enable-instant-analytics='true' fill-above='true' fill-below='true' formula='average' id='refline1' label-type='none' percentage-bands='true' probability='95' scope='per-cell' symmetric='false' value-column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' z-order='1'>
              <reference-line-value percentage='60' />
              <reference-line-value percentage='80' />
            </reference-line>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='mark-color' value='#76b7b2' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</rows>
        <cols>[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]</cols>
      </table>
      <simple-id uuid='{F542AF2D-DCF5-419D-804D-0A9613919049}' />
    </worksheet>
    <worksheet name='Good green house'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Top countries with low greenhouse value (in Kt) with  Per capita</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Test (2)' name='federated.1ncple71yw630v177y4xk14h29ts' />
          </datasources>
          <datasource-dependencies datasource='federated.1ncple71yw630v177y4xk14h29ts'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Per Capita]' role='measure' type='quantitative' />
            <column-instance column='[Per Capita]' derivation='Avg' name='[avg:Per Capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[value]' derivation='Avg' name='[avg:value:qk]' pivot='key' type='quantitative' />
            <column caption='Country1' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[unit]' derivation='None' name='[none:unit:nk]' pivot='key' type='nominal' />
            <column caption='Unit' datatype='string' name='[unit]' role='dimension' type='nominal' />
            <column caption='Value' datatype='real' name='[value]' role='measure' type='quantitative' />
            <column caption='Year1' datatype='date' datatype-customized='true' name='[year]' role='dimension' type='quantitative' />
            <column-instance column='[year]' derivation='Year' name='[yr:year:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action3_10B2C6AC8DAA428BAB7321954717A45E]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' included-values='non-null' />
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]'>
            <groupfilter function='level-members' level='[none:Country:nk]' user:ui-enumeration='all' user:ui-exclude='true' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:country:nk]'>
            <groupfilter count='50' end='bottom' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([value])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Albania&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Algeria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Angola&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Anguilla&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Antigua and Barbuda&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Armenia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Aruba&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bahamas&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Barbados&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Belize&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Benin&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bermuda&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bhutan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bolivia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bosnia and Herzegovina&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Botswana&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Brunei&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Brunei Darussalam&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Burkina Faso&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Burundi&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cabo Verde&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cameroon&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cape Verde&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cayman Islands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Central African Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Chad&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Comoros&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Congo&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Congo_the Democratic Republic of the&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cook Islands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Costa Rica&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cote d&apos;Ivoire&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cuba&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Curaçao&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Czechia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Djibouti&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Dominica&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Dominican Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ecuador&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;El Salvador&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Equatorial Guinea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Eritrea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Estonia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Eswatini&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;EU27&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Falkland Islands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Faroe Islands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Faroes&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Fiji&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;France and Monaco&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;French Guiana&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;French Polynesia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Gabon&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Gambia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Georgia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ghana&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Gibraltar&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;GLOBAL TOTAL&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Greenland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Grenada&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Guadeloupe&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Guinea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Guinea-Bissau&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Guyana&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Haiti&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Honduras&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Iceland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Int. Shipping&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;International Aviation&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;International Shipping&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Iran, Islamic Republic of&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Iraq&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Israel and Palestine, State of&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Italy, San Marino and the Holy See&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Jamaica&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Kiribati&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Korea, Democratic People&apos;s Republic of&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Korea, Republic of&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Kyrgyzstan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lao People&apos;s Democratic Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Laos&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lesotho&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Liberia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Libya&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Libyan Arab Jamahiriya&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Macao&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Madagascar&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Malawi&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mali&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Martinique&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mauritania&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Moldova&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Moldova, Republic of&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Morocco&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Mozambique&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Myanmar/Burma&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Namibia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Netherlands Antilles&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;New Caledonia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Nicaragua&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Niger&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;North Korea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;North Macedonia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Palau&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Panama&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Papua New Guinea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Paraguay&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Puerto Rico&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Reunion&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Réunion&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Russian Federation&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Rwanda&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saint Helena&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saint Helena, Ascension and Tristan da Cunha&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saint Kitts and Nevis&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saint Lucia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saint Pierre and Miquelon&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Samoa&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;São Tomé and Príncipe&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Senegal&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Serbia and Montenegro&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Seychelles&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Sierra Leone&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Somalia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;South Korea&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Spain and Andorra&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Sri Lanka&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Sudan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Sudan and South Sudan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Suriname&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Switzerland and Liechtenstein&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Syria&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Syrian Arab Republic&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Taiwan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Taiwan_Province of China&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Tajikistan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Tanzania&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Tanzania_United Republic of&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;The Gambia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Timor-Leste&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Togo&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Tonga&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Tunisia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Turkmenistan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Uganda&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Uruguay&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Uzbekistan&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Vanuatu&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Venezuela&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Viet Nam&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Vietnam&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Virgin Islands_British&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Western Sahara&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Yemen&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Zambia&quot;' />
                  <groupfilter function='member' level='[none:country:nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:unit:nk]'>
            <groupfilter function='member' level='[none:unit:nk]' member='&quot;kt&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[yr:year:ok]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[yr:year:ok]' member='2015' />
              <groupfilter function='member' level='[yr:year:ok]' member='2016' />
              <groupfilter function='member' level='[yr:year:ok]' member='2017' />
              <groupfilter function='member' level='[yr:year:ok]' member='2018' />
              <groupfilter function='member' level='[yr:year:ok]' member='2019' />
              <groupfilter function='member' level='[yr:year:ok]' member='2020' />
              <groupfilter function='member' level='[yr:year:ok]' member='2021' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[yr:year:ok]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:country:nk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:unit:nk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' palette='green_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <size column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' />
              <color column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' />
              <text column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]' />
              <text column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{840BA31C-B9EE-4523-84D1-ABDA14B6D677}' />
    </worksheet>
    <worksheet name='Sheet 12'>
      <table>
        <view>
          <datasources>
            <datasource caption='Test (2)' name='federated.1ncple71yw630v177y4xk14h29ts' />
          </datasources>
          <datasource-dependencies datasource='federated.1ncple71yw630v177y4xk14h29ts'>
            <column-instance column='[value]' derivation='Avg' name='[avg:value:qk]' pivot='key' type='quantitative' />
            <column caption='Country1' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[year]' derivation='None' name='[none:year:qk]' pivot='key' type='quantitative' />
            <column caption='Value' datatype='real' name='[value]' role='measure' type='quantitative' />
            <column caption='Year1' datatype='date' datatype-customized='true' name='[year]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:country:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([value])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:year:qk]' included-values='in-range'>
            <min>#2015-01-01#</min>
            <max>#2021-01-01#</max>
          </filter>
          <slices>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:country:nk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' />
              <text column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ncple71yw630v177y4xk14h29ts].[none:country:nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{813DC069-8421-420E-BF57-B3FFEB8426C3}' />
    </worksheet>
    <worksheet name='Top 10 countries by per capita'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Top 10 Countries with highest Per Capita</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Test (2)' name='federated.1ncple71yw630v177y4xk14h29ts' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ncple71yw630v177y4xk14h29ts'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Per Capita]' role='measure' type='quantitative' />
            <column datatype='real' name='[Total]' role='measure' type='quantitative' />
            <column datatype='date' datatype-customized='true' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Per Capita]' derivation='Avg' name='[avg:Per Capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total]' derivation='Avg' name='[avg:Total:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action1_DFE9F86ABC174E4BA87BB4DAB0544088]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([Per Capita])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]' included-values='in-range'>
            <min>#2015-01-01#</min>
            <max>#2021-01-01#</max>
          </filter>
          <slices>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' palette='green_gold_10_0' type='interpolated' />
            <encoding attr='size-bar' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' value='false' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='admin-2-boundaries-bg' value='true' />
            <format attr='enabled' id='admin-2-boundaries' value='true' />
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='light' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' />
              <color column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' />
              <text column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]' />
              <text column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' />
              <text column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{9E4F9304-99B3-4DC7-A8A0-D5856C64ECEA}' />
    </worksheet>
    <worksheet name='bad 10'>
      <layout-options>
        <title>
          <formatted-text>
            <run>High AQI</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Test (2)' name='federated.1ncple71yw630v177y4xk14h29ts' />
          </datasources>
          <datasource-dependencies datasource='federated.1ncple71yw630v177y4xk14h29ts'>
            <column datatype='integer' name='[AQI Value]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country (Aqi)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[AQI Value]' derivation='Avg' name='[avg:AQI Value:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country (Aqi)]' derivation='None' name='[none:Country (Aqi):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action3_10B2C6AC8DAA428BAB7321954717A45E]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([AQI Value])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='%null%' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Albania&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Algeria&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Andorra&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Angola&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Armenia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Aruba&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Barbados&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Belize&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Benin&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Bhutan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Bolivia (Plurinational State of)&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Bosnia and Herzegovina&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Botswana&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Burkina Faso&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Burundi&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Cabo Verde&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Cameroon&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Central African Republic&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Chad&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Comoros&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Congo&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Costa Rica&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Côte d&apos;Ivoire&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Cuba&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Czechia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Democratic Republic of the Congo&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Dominican Republic&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Ecuador&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;El Salvador&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Equatorial Guinea&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Eritrea&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Estonia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Gabon&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Gambia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Georgia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Ghana&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Guinea&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Guinea-Bissau&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Guyana&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Haiti&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Honduras&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Iceland&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Iran (Islamic Republic of)&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Iraq&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Jamaica&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Kingdom of Eswatini&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Kyrgyzstan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Lao People&apos;s Democratic Republic&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Lesotho&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Liberia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Libya&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Madagascar&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Malawi&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Mali&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Mauritania&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Monaco&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Montenegro&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Morocco&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Mozambique&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Myanmar&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Namibia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Nicaragua&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Niger&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Palau&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Panama&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Papua New Guinea&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Paraguay&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Republic of Korea&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Republic of Moldova&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Republic of North Macedonia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Russian Federation&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Rwanda&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Saint Kitts and Nevis&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Saint Lucia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Senegal&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Serbia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Seychelles&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Sierra Leone&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Somalia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;South Sudan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Sri Lanka&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;State of Palestine&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Sudan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Suriname&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Syrian Arab Republic&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Tajikistan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Togo&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Tunisia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Turkmenistan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Uganda&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;United Kingdom of Great Britain and Northern Ireland&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;United Republic of Tanzania&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;United States of America&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Uruguay&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Uzbekistan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Vanuatu&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Venezuela (Bolivarian Republic of)&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Viet Nam&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Yemen&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Zambia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' palette='red_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' />
              <text column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{54CE3CB1-A163-422A-A8FD-60C1BA70D9FE}' />
    </worksheet>
    <worksheet name='bad AQI '>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Top 10 countries of high AQI with  per capita</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Test (2)' name='federated.1ncple71yw630v177y4xk14h29ts' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ncple71yw630v177y4xk14h29ts'>
            <column datatype='integer' name='[AQI Value]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country (Aqi)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Per Capita]' role='measure' type='quantitative' />
            <column datatype='date' datatype-customized='true' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[AQI Value]' derivation='Avg' name='[avg:AQI Value:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Per Capita]' derivation='Avg' name='[avg:Per Capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country (Aqi)]' derivation='None' name='[none:Country (Aqi):nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action3_10B2C6AC8DAA428BAB7321954717A45E]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([AQI Value])' function='order' user:ui-marker='order'>
                <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
                  <groupfilter function='level-members' level='[none:Country (Aqi):nk]' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='%null%' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]' included-values='in-range'>
            <min>#2015-01-01#</min>
            <max>#2021-01-01#</max>
          </filter>
          <slices>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='refline'>
            <format attr='stroke-color' id='refline0' value='#000000' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='div-level' scope='rows' value='10' />
            <format attr='div-level' scope='cols' value='10' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='light' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' />
            </encodings>
            <reference-line axis-column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='none' probability='95' scope='per-cell' value-column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' z-order='2' />
            <reference-line axis-column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' enable-instant-analytics='true' fill-above='true' fill-below='true' formula='average' id='refline1' label-type='none' percentage-bands='true' probability='95' scope='per-cell' symmetric='false' value-column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' z-order='1'>
              <reference-line-value percentage='60' />
              <reference-line-value percentage='80' />
            </reference-line>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='mark-color' value='#76b7b2' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</rows>
        <cols>[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]</cols>
      </table>
      <simple-id uuid='{0E55FEDF-9326-48D4-B78F-0F2F62C0EF57}' />
    </worksheet>
    <worksheet name='good 10'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Low AQI</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Test (2)' name='federated.1ncple71yw630v177y4xk14h29ts' />
          </datasources>
          <datasource-dependencies datasource='federated.1ncple71yw630v177y4xk14h29ts'>
            <column datatype='integer' name='[AQI Value]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country (Aqi)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[AQI Value]' derivation='Avg' name='[avg:AQI Value:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country (Aqi)]' derivation='None' name='[none:Country (Aqi):nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action3_10B2C6AC8DAA428BAB7321954717A45E]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]'>
            <groupfilter count='10' end='bottom' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([AQI Value])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='%null%' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Albania&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Algeria&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Andorra&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Angola&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Armenia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Aruba&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Barbados&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Belize&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Benin&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Bhutan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Bolivia (Plurinational State of)&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Bosnia and Herzegovina&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Botswana&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Burkina Faso&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Burundi&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Cabo Verde&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Cameroon&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Central African Republic&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Chad&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Comoros&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Congo&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Costa Rica&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Côte d&apos;Ivoire&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Cuba&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Czechia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Democratic Republic of the Congo&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Dominican Republic&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Ecuador&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;El Salvador&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Equatorial Guinea&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Eritrea&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Estonia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Gabon&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Gambia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Georgia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Ghana&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Guinea&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Guinea-Bissau&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Guyana&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Haiti&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Honduras&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Iceland&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Iran (Islamic Republic of)&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Iraq&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Jamaica&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Kingdom of Eswatini&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Kyrgyzstan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Lao People&apos;s Democratic Republic&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Lesotho&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Liberia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Libya&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Madagascar&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Malawi&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Mali&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Mauritania&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Monaco&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Montenegro&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Morocco&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Mozambique&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Myanmar&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Namibia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Nicaragua&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Niger&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Palau&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Panama&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Papua New Guinea&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Paraguay&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Republic of Korea&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Republic of Moldova&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Republic of North Macedonia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Russian Federation&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Rwanda&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Saint Kitts and Nevis&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Saint Lucia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Senegal&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Serbia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Seychelles&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Sierra Leone&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Somalia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;South Sudan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Sri Lanka&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;State of Palestine&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Sudan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Suriname&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Syrian Arab Republic&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Tajikistan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Togo&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Tunisia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Turkmenistan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Uganda&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;United Kingdom of Great Britain and Northern Ireland&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;United Republic of Tanzania&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;United States of America&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Uruguay&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Uzbekistan&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Vanuatu&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Venezuela (Bolivarian Republic of)&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Viet Nam&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Yemen&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Zambia&quot;' />
                  <groupfilter function='member' level='[none:Country (Aqi):nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' palette='green_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' />
              <text column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{A8941073-CDC3-41B6-AB3F-53F3731267DB}' />
    </worksheet>
    <worksheet name='per capita map'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Country Map by Per Capita</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Test (2)' name='federated.1ncple71yw630v177y4xk14h29ts' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ncple71yw630v177y4xk14h29ts'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Per Capita]' role='measure' type='quantitative' />
            <column datatype='date' datatype-customized='true' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Per Capita]' derivation='Avg' name='[avg:Per Capita:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='Year' name='[yr:Year:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action4_95E8775CC7DE4685BF072BBA718E491C]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.1ncple71yw630v177y4xk14h29ts].[Latitude (generated)]' included-values='non-null' />
          <filter class='quantitative' column='[federated.1ncple71yw630v177y4xk14h29ts].[Longitude (generated)]' included-values='non-null' />
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[yr:Year:ok]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[yr:Year:ok]' member='2015' />
              <groupfilter function='member' level='[yr:Year:ok]' member='2016' />
              <groupfilter function='member' level='[yr:Year:ok]' member='2017' />
              <groupfilter function='member' level='[yr:Year:ok]' member='2018' />
              <groupfilter function='member' level='[yr:Year:ok]' member='2019' />
              <groupfilter function='member' level='[yr:Year:ok]' member='2020' />
              <groupfilter function='member' level='[yr:Year:ok]' member='2021' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[yr:Year:ok]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[Latitude (generated)]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[Longitude (generated)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1ncple71yw630v177y4xk14h29ts].[Longitude (generated)]' field-type='quantitative' max='35508981.881013155' min='-37043191.401564643' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1ncple71yw630v177y4xk14h29ts].[Latitude (generated)]' field-type='quantitative' max='6326774.7078264831' min='-3138550.0423557423' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-diverging'>
                <color>#ae123a</color>
                <color>#bf193b</color>
                <color>#ce253d</color>
                <color>#dc3440</color>
                <color>#e74545</color>
                <color>#ef574c</color>
                <color>#f46956</color>
                <color>#f77c66</color>
                <color>#fa8d75</color>
                <color>#fc9c89</color>
                <color>#feac9d</color>
                <color>#ced7c3</color>
                <color>#c8dcc8</color>
                <color>#b7dfb7</color>
                <color>#a5e3a5</color>
                <color>#92e692</color>
                <color>#7fea7f</color>
                <color>#6ced6c</color>
                <color>#57f157</color>
                <color>#42f442</color>
                <color>#2df82d</color>
                <color>#16fb16</color>
                <color>#00ff00</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]' value='false' />
            <format attr='break-on-special' field='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.72000002861022949' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <color column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' />
              <tooltip column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' />
              <lod column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]' />
              <geometry column='[federated.1ncple71yw630v177y4xk14h29ts].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1ncple71yw630v177y4xk14h29ts].[Latitude (generated)]</rows>
        <cols>[federated.1ncple71yw630v177y4xk14h29ts].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{8C2930D8-9454-4923-9D35-ED197D52453F}' />
    </worksheet>
    <worksheet name='top 10 with bad emission'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true'>Top 10 Countries with highest Emisssion</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Test (2)' name='federated.1ncple71yw630v177y4xk14h29ts' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1ncple71yw630v177y4xk14h29ts'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Total]' role='measure' type='quantitative' />
            <column datatype='date' datatype-customized='true' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Total]' derivation='Avg' name='[avg:Total:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]'>
            <groupfilter function='level-members' level='[Country]' user:ui-action-filter='[Action2_685001320E0D400391970AAA58779127]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([Total])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Albania&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Algeria&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Andorra&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Angola&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Anguilla&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Antarctica&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Antigua and Barbuda&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Armenia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Aruba&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bahamas&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Barbados&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belize&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Benin&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bermuda&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bhutan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bolivia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bonaire, Saint Eustatius and Saba&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bosnia and Herzegovina&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Botswana&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;British Virgin Islands&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brunei Darussalam&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Burkina Faso&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Burundi&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cameroon&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cape Verde&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Central African Republic&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Chad&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Christmas Island&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Comoros&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Congo&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cook Islands&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Costa Rica&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Côte d&apos;Ivoire&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cuba&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Curaçao&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Democratic Republic of the Congo&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Djibouti&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Dominica&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Dominican Republic&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ecuador&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;El Salvador&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Equatorial Guinea&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Eritrea&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Estonia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Faeroe Islands&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Fiji&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;French Equatorial Africa&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;French Guiana&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;French Polynesia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;French West Africa&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Gabon&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Gambia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Georgia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ghana&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Greenland&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Grenada&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guadeloupe&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guinea&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guinea-Bissau&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guyana&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Haiti&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Honduras&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iceland&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iraq&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Jamaica&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kiribati&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kosovo&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kuwaiti Oil Fires&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kyrgyzstan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Laos&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Leeward Islands&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lesotho&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Liberia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Libya&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Liechtenstein&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Macao&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Madagascar&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malawi&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mali&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Marshall Islands&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Martinique&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mauritania&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mayotte&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Micronesia (Federated States of)&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Moldova&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Montenegro&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Montserrat&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Morocco&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mozambique&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Myanmar&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Namibia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nauru&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;New Caledonia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nicaragua&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Niger&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Niue&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;North Korea&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;North Macedonia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Occupied Palestinian Territory&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Pacific Islands (Palau)&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Palau&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Panama&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Panama Canal Zone&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Papua New Guinea&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Paraguay&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Puerto Rico&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Réunion&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Rwanda&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ryukyu Islands&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Helena&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Kitts and Nevis&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Lucia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Pierre and Miquelon&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Vincent and the Grenadines&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Samoa&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sao Tome and Principe&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Senegal&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Serbia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Seychelles&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sierra Leone&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sint Maarten (Dutch part)&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Somalia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Korea&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Sudan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sri Lanka&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;St. Kitts-Nevis-Anguilla&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sudan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Suriname&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Swaziland&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Syria&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Taiwan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tajikistan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tanzania&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Timor-Leste&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Togo&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tonga&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tunisia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turkmenistan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turks and Caicos Islands&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tuvalu&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uganda&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uruguay&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;USA&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uzbekistan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vanuatu&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Venezuela&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Viet Nam&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Wallis and Futuna Islands&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Yemen&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Zambia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]' included-values='in-range'>
            <min>#2015-01-01#</min>
            <max>#2021-01-01#</max>
          </filter>
          <slices>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]</column>
            <column>[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='admin-2-boundaries-bg' value='true' />
            <format attr='enabled' id='admin-2-boundaries' value='true' />
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='light' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]' />
              <color column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]' />
              <text column='[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]' />
              <text column='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{4AC2AC0A-04C7-4A29-8615-411A166D3349}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='1700' maxwidth='1700' minheight='1700' minwidth='1700' preset-index='1' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='22' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='25' param='horz' type-v2='layout-flow' w='100000' x='0' y='0'>
            <zone friendly-name='**title**' h='100000' id='23' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='100000' id='76' param='horz' type-v2='layout-flow' w='100000' x='0' y='0' />
            </zone>
          </zone>
        </zone>
        <zone h='26882' id='26' name='Top 10 countries by per capita' w='41588' x='3059' y='5118' />
        <zone h='6250' id='30' name='Top 10 countries by per capita' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' type-v2='color' w='10000' x='33000' y='4500' />
        <zone h='26882' id='31' name='top 10 with bad emission' w='41588' x='42529' y='5118' />
        <zone h='6313' id='32' name='top 10 with bad emission' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]' type-v2='color' w='10000' x='72563' y='3750' />
        <zone h='23000' id='35' name='BAd coutries percapita' show-title='false' w='17235' x='81353' y='8529' />
        <zone h='26882' id='49' name='Good AQI' w='39412' x='1706' y='34824' />
        <zone h='26412' id='50' name='bad AQI ' w='37588' x='41706' y='34353' />
        <zone h='23294' id='51' name='good 10' w='8647' x='79882' y='35059' />
        <zone h='5176' id='52' name='good 10' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' type-v2='color' w='8235' x='80353' y='58824' />
        <zone h='23294' id='53' name='bad 10' w='8647' x='89941' y='35294' />
        <zone h='5176' id='54' name='bad 10' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' type-v2='color' w='8235' x='90000' y='59176' />
        <zone h='31176' id='59' name='Good green house' w='43824' x='2235' y='65941' />
        <zone h='30176' id='61' name='BAd green house' w='47118' x='48235' y='66412' />
        <zone h='5176' id='62' name='Good green house' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' type-v2='color' w='8235' x='32588' y='96412' />
        <zone h='5176' id='63' name='BAd green house' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' type-v2='color' w='8235' x='86824' y='96235' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='3000' minheight='3000' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='106' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='99058' id='105' param='vert' type-v2='layout-flow' w='99058' x='471' y='471'>
                <zone fixed-size='280' h='26882' id='26' is-fixed='true' name='Top 10 countries by per capita' w='41588' x='3059' y='5118'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6250' id='30' name='Top 10 countries by per capita' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' type-v2='color' w='10000' x='33000' y='4500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='26882' id='31' is-fixed='true' name='top 10 with bad emission' w='41588' x='42529' y='5118'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6313' id='32' name='top 10 with bad emission' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]' type-v2='color' w='10000' x='72563' y='3750'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='23000' id='35' is-fixed='true' name='BAd coutries percapita' show-title='false' w='17235' x='81353' y='8529'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='26412' id='50' is-fixed='true' name='bad AQI ' w='37588' x='41706' y='34353'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='26882' id='49' is-fixed='true' name='Good AQI' w='39412' x='1706' y='34824'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='23294' id='51' is-fixed='true' name='good 10' w='8647' x='79882' y='35059'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5176' id='52' name='good 10' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' type-v2='color' w='8235' x='80353' y='58824'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='23294' id='53' is-fixed='true' name='bad 10' w='8647' x='89941' y='35294'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5176' id='54' name='bad 10' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' type-v2='color' w='8235' x='90000' y='59176'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='31176' id='59' is-fixed='true' name='Good green house' w='43824' x='2235' y='65941'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5176' id='62' name='Good green house' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' type-v2='color' w='8235' x='32588' y='96412'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='30176' id='61' is-fixed='true' name='BAd green house' w='47118' x='48235' y='66412'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5176' id='63' name='BAd green house' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' type-v2='color' w='8235' x='86824' y='96235'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{2F61DA8A-E5DC-4EC5-951D-137EB9C3144C}' />
    </dashboard>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1 (2)'>
      <style />
      <size maxheight='2000' maxwidth='1700' minheight='2000' minwidth='1700' preset-index='1' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='86' type-v2='layout-basic' w='100000' x='0' y='0' />
        <zone h='26353' id='26' name='Top 10 countries by per capita' w='36118' x='4235' y='17059' />
        <zone h='6235' id='30' name='Top 10 countries by per capita' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' type-v2='color' w='10000' x='32647' y='16647' />
        <zone h='26353' id='31' name='top 10 with bad emission' w='36118' x='52588' y='17353' />
        <zone h='6294' id='32' name='top 10 with bad emission' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]' type-v2='color' w='10000' x='80765' y='17059' />
        <zone h='26850' id='49' name='Good AQI' w='39412' x='-412' y='46000' />
        <zone h='26450' id='50' name='bad AQI ' w='37588' x='52882' y='47000' />
        <zone h='20250' id='51' name='good 10' w='8647' x='40706' y='47200' />
        <zone h='5176' id='52' name='good 10' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' type-v2='color' w='8235' x='41294' y='67059' />
        <zone h='20250' id='53' name='bad 10' w='8647' x='90941' y='47250' />
        <zone h='5200' id='54' name='bad 10' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' type-v2='color' w='8235' x='91235' y='67750' />
        <zone h='24850' id='59' name='Good green house' w='35235' x='4765' y='75200' />
        <zone h='24900' id='61' name='BAd green house' w='35235' x='58529' y='75000' />
        <zone h='5176' id='62' name='Good green house' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' type-v2='color' w='8235' x='31176' y='78000' />
        <zone h='5200' id='63' name='BAd green house' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' type-v2='color' w='8235' x='86176' y='77200' />
        <zone h='16350' id='81' name='BAd coutries percapita (2)' w='9294' x='90647' y='16850'>
          <layout-cache fixed-size-h='411' fixed-size-w='122' type-h='fixed' type-w='fixed' />
        </zone>
        <zone h='8100' id='84' name='BAd coutries percapita (2)' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' type-v2='size' w='9588' x='90529' y='34000' />
        <zone h='12850' id='85' name='per capita map' w='92941' x='2706' y='3800' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='3350' minheight='3350' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='106' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='99200' id='105' param='vert' type-v2='layout-flow' w='99058' x='471' y='400'>
                <zone fixed-size='257' h='12850' id='85' is-fixed='true' name='per capita map' w='92941' x='2706' y='3800'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='16350' id='81' is-fixed='true' name='BAd coutries percapita (2)' w='9294' x='90647' y='16850'>
                  <layout-cache fixed-size-h='411' fixed-size-w='122' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='8100' id='84' name='BAd coutries percapita (2)' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' type-v2='size' w='9588' x='90529' y='34000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='26353' id='26' is-fixed='true' name='Top 10 countries by per capita' w='36118' x='4235' y='17059'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6235' id='30' name='Top 10 countries by per capita' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' type-v2='color' w='10000' x='32647' y='16647'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='26353' id='31' is-fixed='true' name='top 10 with bad emission' w='36118' x='52588' y='17353'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='6294' id='32' name='top 10 with bad emission' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]' type-v2='color' w='10000' x='80765' y='17059'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='26850' id='49' is-fixed='true' name='Good AQI' w='39412' x='-412' y='46000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='26450' id='50' is-fixed='true' name='bad AQI ' w='37588' x='52882' y='47000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='20250' id='51' is-fixed='true' name='good 10' w='8647' x='40706' y='47200'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5176' id='52' name='good 10' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' type-v2='color' w='8235' x='41294' y='67059'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='20250' id='53' is-fixed='true' name='bad 10' w='8647' x='90941' y='47250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5200' id='54' name='bad 10' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' type-v2='color' w='8235' x='91235' y='67750'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='24900' id='61' is-fixed='true' name='BAd green house' w='35235' x='58529' y='75000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5200' id='63' name='BAd green house' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' type-v2='color' w='8235' x='86176' y='77200'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='24850' id='59' is-fixed='true' name='Good green house' w='35235' x='4765' y='75200'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5176' id='62' name='Good green house' pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' type-v2='color' w='8235' x='31176' y='78000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{2F93D5D9-16F6-48FA-BA54-9733D6FB18AA}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='BAd coutries percapita'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='BAd green house'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Good AQI'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Good green house'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Top 10 countries by per capita' />
        <viewpoint name='bad 10'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='bad AQI '>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='good 10'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='top 10 with bad emission' />
      </viewpoints>
      <active id='59' />
      <simple-id uuid='{4C67219C-165D-469E-BB0D-28A64996DD1E}' />
    </window>
    <window class='dashboard' name='Dashboard 1 (2)'>
      <viewpoints>
        <viewpoint name='BAd coutries percapita (2)'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='BAd green house'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Good AQI'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Good green house'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Top 10 countries by per capita'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='bad 10'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='bad AQI '>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='good 10'>
          <zoom type='entire-view' />
          <selection-collection>
            <tuple-selection>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields />
                    <y-fields>
                      <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</field>
                    </y-fields>
                  </pane-descriptor>
                  <columns>
                    <field>[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]</field>
                    <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>28.235294117647058</value>
                  <value>&quot;Argentina&quot;</value>
                </tuple>
              </tuple-reference>
            </tuple-selection>
          </selection-collection>
        </viewpoint>
        <viewpoint name='per capita map'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='top 10 with bad emission'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='85' />
      <simple-id uuid='{D64173A9-D9C0-4557-816B-A7CB7BBAD29E}' />
    </window>
    <window class='worksheet' name='Top 10 countries by per capita'>
      <cards>
        <edge name='left'>
          <strip size='228'>
            <card type='filters' />
            <card type='pages' />
            <card type='marks' />
          </strip>
          <strip size='100'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[:Measure Names]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country (Aqi))]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[io:Action (Country (Aqi)):nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[max:Per Capita:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:PM2.5 AQI Category:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:country_code:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[sum:PM2.5 AQI Value:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[tyr:Year:ok]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[tyr:Year:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[yr:Year:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8B17E5F6-4DAC-4C54-94D3-35E7A9F84747}' />
    </window>
    <window class='worksheet' name='top 10 with bad emission'>
      <cards>
        <edge name='left'>
          <strip size='228'>
            <card type='filters' />
            <card type='pages' />
            <card type='marks' />
          </strip>
          <strip size='100'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[:Measure Names]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country (Aqi))]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[io:Action (Country (Aqi)):nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[max:Per Capita:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:PM2.5 AQI Category:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:country_code:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[sum:PM2.5 AQI Value:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[tyr:Year:ok]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[tyr:Year:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[yr:Year:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{A6361856-F1BB-4EEB-8C34-56AD823D9C17}' />
    </window>
    <window class='worksheet' name='BAd coutries percapita'>
      <cards>
        <edge name='left'>
          <strip size='228'>
            <card type='filters' />
            <card type='pages' />
            <card type='marks' />
            <card type='measures' />
          </strip>
          <strip size='212'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[:Measure Names]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country (Aqi))]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[io:Action (Country (Aqi)):nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[max:Per Capita:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:PM2.5 AQI Category:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:country_code:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[sum:PM2.5 AQI Value:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[tyr:Year:ok]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[tyr:Year:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[yr:Year:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5B085C5E-857A-4C28-983D-910200C5D106}' />
    </window>
    <window class='worksheet' name='BAd coutries percapita (2)'>
      <cards>
        <edge name='left'>
          <strip size='228'>
            <card type='filters' />
            <card type='pages' />
            <card type='marks' />
          </strip>
          <strip size='212'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]' type='color' />
            <card pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[:Measure Names]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[Action (Country (Aqi))]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[io:Action (Country (Aqi)):nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[max:Per Capita:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:PM2.5 AQI Category:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:country_code:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[sum:PM2.5 AQI Value:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[tyr:Year:ok]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[tyr:Year:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[yr:Year:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6B1C6826-AA24-4438-86AF-BA3F00A62C90}' />
    </window>
    <window class='worksheet' name='Good AQI'>
      <cards>
        <edge name='left'>
          <strip size='168'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country_Code:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[sum:Per Capita:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D324A36A-6416-456E-A03F-77705A414D78}' />
    </window>
    <window class='worksheet' name='good 10'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E8FEFB75-6E97-4584-BD11-AE2DC4114970}' />
    </window>
    <window class='worksheet' name='bad AQI '>
      <cards>
        <edge name='left'>
          <strip size='168'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country_Code:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[sum:Per Capita:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{75000F56-5C3F-49CD-871C-9B73F35A3265}' />
    </window>
    <window class='worksheet' name='bad 10'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:AQI Value:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8E184A8C-0A00-46FB-AC09-8C8B13BA7F20}' />
    </window>
    <window class='worksheet' name='BAd green house'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[:Measure Names]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country (Aqi):nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Year:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:country:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:unit:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:year:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[tyr:year:ok]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[tyr:year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{11778679-C8BE-4E44-9F8C-F70DDC838073}' />
    </window>
    <window class='worksheet' name='Good green house'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:country:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:unit:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:year:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[yr:year:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{715245D0-81C9-4AB6-BBEA-F1759CB19E30}' />
    </window>
    <window class='worksheet' name='Sheet 12'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[avg:value:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:country:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:unit:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{38A46F06-F477-405B-A5EE-EBDAC4C8B337}' />
    </window>
    <window class='worksheet' name='per capita map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[avg:Per Capita:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[avg:Total:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[max:PM2.5 AQI Value:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[max:Per Capita:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[none:Country:nk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[sum:Coal:qk]</field>
            <field>[federated.1ncple71yw630v177y4xk14h29ts].[yr:Year:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AA2AF10D-D879-4B59-A028-21B41C942F36}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='BAd coutries percapita' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nOydZ3hVVb7/P6e3nJzkpPdeSCAhQOi9CdIFFfvYndGZuU6/c++M858+44x3
      dLq9oQgo0jvSkR5CQkjvvZ7e9/6/ACkCKlJkzP48Dy/YZa2VfdZ371V+RSaKooiERD9EJpPJ
      5F91IyQkvkokAUj0ayQBSPRrJAFI9GskAUj0ayQBSPRrJAFI9GskAUj0ayQBSPRrJAFI9Gsk
      AUj0ayQBSPRrJAFI9GskAUj0ayQBSPRrJAFI9GskAUj0ayQBSPRrJAFI9GskAUj0ayQBSPRr
      JAFI9GskAUj0ayQBSPRrJAFI9GskAUj0a5RfdQMkPg8fnTUfs/L19dRFDuO+hbeQHROE7Ktu
      1uXoOMarS9ZTa4GJ3/gJU5IV16kiHx0VH7NmxXqqbJ86pYtj7K1zmTosEc3nlCIJ4GbH56bl
      6AFK6i3YLCUUNQ8lNSboc3/Yr4rmkp1sbVUx1L6djUfuZkpyynWqSYEpNpfpd0Qwxt/Hnn/+
      geXa23j+wUJQaDFHRKD6AqVIArjJ8brslFVUEj55BoXNuzl1ogXHwCTUGhGfy44roERv0KOS
      gygGcFotBFRGjHoVBLw4HQ5c3gAyuRKlUolKpUKj03Bd3suBdkqO1RGbvogZQV388qPdVM9P
      IU0BgteBxR5AH2JEI5cBATwOBy5BhdGgRY6Ax2nH6fYhyBSo1QoCaAg1Xk7qcjRBZhLSzUAX
      1cEalPpYsrOzr6jJkgBuclyWYk5WyRgwczjpimK2l5TR6ywgVOah6MPneeNEFI88/QgFkUoC
      rhr+9b0fYJ/1LD+dG0fzkS0s+3ArlV1eNMHhGGVq4vImcsf9E4m8Dm31t1VxrF5J2qJYos0D
      CV51iNLaxaSlq3Ge/ICnf7GPeX/9PxYkaMHXxraXnmetexQ/+9ZsNJ37Wf72So422pAFhZEY
      7OKgYiYfPjPzOrT0HNIk+Cant/QwrapMslLiSM1MQd12iuIuJzK1npisXELcDTS29CIA3ro9
      FPckM3RICr7mI7y3dDPOAXfw2xf+ybM/vI90WQttnuvVUh9ttdU0K8IYEGdCnzSULEMbJSdq
      8QJBmUMZEdXGgaNdAHhaGyhr9pI+KJ0gvZ2dr/6Dw/LRfO8Pf+Pvf/oe+WobDp/3ejX2LJIA
      bmpclB44TiB5EMkhEJqcRoKyjUMl3SBTER6TQWKIn5q6JuwBgYbDB3FkjKMgXqSlsoxKXwxT
      xuQSplMgV6hQKa/j1NlvobaqioApjrjgINSqeLLTNDSUnaTNC+hTGT8ynoo9B+nER0dLA13y
      MAamRKN3FrPruJP8yTPICtOiUKpQK+XciJm+NAS6mXGUsudACw36pfzmh5uR+y1U1zdg3VuM
      47ZM9OHRZCYY2V5bR481mH27W8mZN4ZopY9ShwOPSkewSnlD3nK+njYqq6qoKq7iL78uRqcM
      0F3bRk9EKTWtt5KYpCVj3GjMq/dS3DwBXU0dMnMaSdGhKGy99AUUmIKNN6ClFyIJ4CbGXfox
      J1VT+P5v7yPjTC92FC3lv189Qol7ESM0YaRlJrN+cw1tRRb2dmZw1+goFATQ6XSoPW1YfH6E
      695Sgd72Jmp9USx+fDHjssKQIWJpLuK997ZSXdvK2KRk1MnjGB79Hnt3l5HRbCc0NYMokxJU
      wQQHAvRZrEDwdW/t+UhDoJsV0c7+bbtQjprIxIx00tNP/8ubMJZB6iNs3mtBlCmIy8ghwWPh
      wzXr6RoygdGhckBJUk4Bg/QtLF+zh6r6JmoqijhVZz1bfOu6Z5g5ey5vFF9c9Zr/mcwdjz/L
      wR6g5xB/+uadTPrpqss31W+jqfo4DjGN/IIhZ9s6MLeAQWaB8tJy2r0iKOMYPyGdw2s/5Jhd
      YMCADEwKIGgk08cbOLzyDXZXNFF/soji+l68gdPld5/aya++MYufvr6TdvcXf4SdO//G4tkT
      eW6vB3BTsf0Vnrj1IV7cW4HzzDWSAG5WxG6sYiazJgxGd95YWBaRw7QJhWBtQ0CGIiKFUcOi
      kXkjmTd9JHoZgAx1fCH3P3IX2dbdvPCnv7C22E1ITDByhQI5oDYnMTA3lyjDxVWbk/MYkBGP
      UQkojcSnDyAvOezybfX5EUQz6YVDiA9XnRm6y9AYzQwcNZQYvYDPefpY3KhpDDcGCEsYy8CU
      kNPXyvRM/tbPuDW6mWUvPMfbexrR6DToNacHKEq9iaSsgSRHmVBdsseqCEsbyOBk84VHQ2LJ
      HphHnEkGyNGFRJMxMJOYYN3ZZWCZlCTv64nX0kGrzU9IeCTBauiu2MMrr3yAYfKTPDwzC91X
      3cALcNJQ1owhMZlQvQJvzwne+s1zlA79Pn+5J++61SqTyWTSHOBrSsDZScnuvVR3OPAHArgd
      NgLJ45hVkHiTdX4ALw1HNnFkcwAxEMDr7KY3dBS3j0297jVLX4CvKYLPQWdzI01t3Th9Akpd
      CLFJKcSHB6G46QyJAlhaaqhp6sThDiBT6whPSCM1OgTVdWysTCaTSQKQ6Ld85hDI7XZTWVl5
      I9sjIXHDkb4AEv0WKVO8RL9HEoBEv+bLLYMKPnrqjrFl7SYOVndCUDwjblnE7PEhnFr1Abst
      mdx922gigj5dfB0r/9/LlAy+n5/Ny7z61ktce7r38btfLqVFuHBkLJPl89QLj/BFfzVH8yFW
      fLCLsEmPMHug6exxwe+m/tAq3lu9nzYxksJbFzF/ZDoG9We9i0V6y3fy3orVBAq/xUOT0tGp
      wN12krUrlrCz/JMdbjnm+ELu+Oa95AaD4Grj6Ka1fLCnGLtfQ0L+ZObNnUJGmPqsnd0VC0AU
      vbSe2MQrL21CPWIeD/1XNlpXCxVHKmgnn676ckq7gnH7LmWBYqfh+DGKw+ZfabUSNwpTPg/9
      KBHfef0/ULeBn68xEv4Fbhf9vRxf9RL/2NxNRJiD+D7f+Wexlq/llaXVjH7oO9wpr+T9N99m
      peFJ7hkSiUx2iSVPUURwNLL/UA3tHe3IHVb84umybF3tuHQxLHz8m6SHAMhQqnSEGABXFe//
      7T1qzfnc9eQtmIReTny0lY3rlRgWTiXu9Jb5lQpAxNfTyK7V6+nLnM1/LZxGgh4ggbQcgFYq
      AcQAXns3TTYPfpQYTGbMwXoUsmwe/Oe/WKg6/Sh9TgvdVjd6gxavw4rdLaDSBWMOC0GnlBFw
      W+nqseD2+BFlCjRBJswhRtRK+c3rE/ufjtJAVNx59hF+CzvXtTJ+wSzMl7/rLH2lh6iImMEf
      /phEyYe/o+SCs26OrN9M6oPPc2u+Dkjlyfu7eHr9ERYUzMRw0Y8qIgSclB/eT5svkjEjszlx
      9kPhwWp1oVSnkp4ZT7z60/eGM+nxp5ln0KNWAMQT4mun4UAnnT1u4vSntwOvWACW3hpKmwQG
      jB9IrP7SV3l6mjmxbx0nik7S1G3DnDObxx6cTYqpmy1/+BbvpPyc979dSPuxNfzh1V0MmDYV
      XVspxyvacWkSuO2JbzI1y0zX8fW8srGInl4PPq8bITSbuffcxYTsSD7ziylxjRBw1OzjY28e
      C7NCv9AdofnTuQMIuD/tqQ7QQOWpDAq/e24vWpc1kKwX9lCHSO6nXmuiCLaWMo6UdZE8fRbx
      Jcc4cbZpHmz2LpprvZz4eBc1ciXGsDjS0hIJVstAF0L42WpEBK+dltZO1LpQTEHn1HKFAhDw
      eNpx2PSYTabL+pV6nV6Mubfy44V3U7P3Ff7x1lGq2qaSYrrExT4nbl0Ktz+2gIU9J/n3s3/g
      eGkT47LMyEOzWPjYLaRGmvB3HWfJ8y+y50A5g1MjidBeWcslvgS+Ho4dbiJh0Biig67FA7fj
      UEYRdv7bWh1KpNKF/VKXBywU79xFIHUeI9OCaDr/cyKqCI2IxGQs49SRI4iICL4AxTnTmTMj
      H/N5PdvnbOfY9q0cbZUzYEwBcaZzPfe62AIZE9LJjAtHrRRQarTIAgECgcClLzbEkJkeT6he
      hduiRaMQcPhP27CHxZo5sf5D1te14vI5aKxrQhXlwu+/Hq2WuBARa0MplS49A5Pj0amu0aBT
      FLlo4+mSO1EC3UWrOewbzJ3j07hosKHQk1Qwg0cLZpy+2u+m9eQeVqxcwb7MDGZnnr4j0F3K
      iqXr6dRnMHriGAalRaA+70+5QgHI0WpjMBgddPf1ESDk+kQXABDa2Pby31jels7tcydjUlo5
      5u6i9nrVJ3Ehvl5OnWxGGZZKaozxGv3OQRiEDno8kPJJsAdvD+0BPQUXXdvApldWsbknlIpD
      ywFwdtbSRTkV2wZx/zM/ZtR5FtpypZaojGEMjNtEVacLMvUIvUW89u9tBI2exoL8bOJDtRfN
      Ha9QADKMISnkxIocOlpEw7BEkg0yQEQQRGTXUg19tRw40kv+txYwaUQEcrENy6FtNEtv/+uP
      KGJvb6Cuu4/YkbmEqq/VkkMy2TmVHD1uo6AwCBkijpJiKrLS+OZFXTOOub/6J1P851YTa7e8
      wDYmc/ekAqKMfpx2F0qdAZX89L2C34PD4UKnUUOgkx1Lt0PhDOaMGYDh0o4EVy4ATVg8E+bP
      p+aldSxdrmL6yAzU9jbqy5wMvD//yor7LILCSI7ysnP3ISrNSfRWH2TLxyU4h025dnVIXBIx
      YKe2/ASWQB6TM4ORf+H+H8DR3UFnnx2vx0lLl51eXS2Vlb3oQqOJCjVScOut7Pj3C6xmAZny
      GtYtr2PS4hloZTLEgAdrrxW/OoiQYB3G8EjO9xK2BuswYCYiMgy1q4WdH75OkZjH+KHphKpc
      nPzoA/Y5pvJknpFA0yF2OoMZbwzQUld9tgylIZToCDO6M4L4EnMANbF50/nW9yLYsmk777+x
      C7khlqGT5xGJFkv6IAoi49CfWaYJMieTP9RAVLAS0BI7aBQjo06vKOjCEsgvCBATfPrTpNQa
      Scsbjic+BKU6mbmP3kfn0o948+0T5I4dwS0LF9OpikJ73cZdEgABrw+foCBr4lDCr2i1zU3D
      4U2s3FVKrxdAB23LePEQpE68l8VT8glJn8k37hJYueEtDojhFMy9m1kDw5HJBFwdFaxfvhWG
      zGf+2JSL/BaCYrJJJwSlDFSmGMbNvRfNRxvYsmwPFp+S2KwJfOu/JpOoBqegJVHWyMb3yy8o
      wzRgEnfPnUJq+OkxmGQMJ3FTIAZc1B3fyv6aIMbPmEh80PXf6ZH8ASRuGsSAl76uJqyyWBIj
      L56sXg8kAUj0az7TIUbShUR/4DMF4HZfQRAWCYn/QCSLGol+jSQAiX6NJACJfs0Vb4Q5O+tY
      v3wJgUF3Mndc+unNCp+Lym1vsqIhnsX3zCLFAP6eUt5+8Q2O1NlAE0JS3lhmzRlPZoTxTFwa
      O+U7VvPe+7toz5jHrx6eitnwRZLaSFwrbA37WLZyH9FTHmXWeV5biAEsTSfYsHwF+6p7kQen
      MOWeB5gzMOKq63T0fcwrP3mdk+cfzL+Lfzw+HvmltpzFAPb2U2x+fy+ygolMG51JEODsqmfD
      G79jy6cCl2jCEpm6+EnmDDrz9wgOite+zfb6ZBZ9+xbiP1X8FQsg4HPR1lCNP955LuqwGMDZ
      1UhNoxpnAISOvTz7s5dwjf82P308DbWzkxO79nKqroNEsxGDEkRLByePNaKJCsN28gTFjrFM
      lARwQxDcnRxZ/Rpv7nESFeVCYb/QwMrWXsTy19cRPOV+/vfBcOitp8RybTJreFvrsWQt4pmH
      Cs9ZeCq1XNoZzE3FR++ydHMRfY4oCpIcfGJTrDPHM+vxPzD1PCNjj62G9a+vJzgsCPBjqT3A
      0leXU2mMxNQSxKX+gutiDt1ddozitgS+s2gwMRoFhIYw8a6M864Q6OtsodbhIm3cBII/WM7+
      oxYmzrjx8eH7I9bqUlqT5vHrGZEUr3mB6gvO+mncswHLiId4aHT86TFyqJnJ16huT0sjgfSR
      xJgu5RxyIaJQT3VzOo/87ywaVm+j+bxzMrkCbZCJc14KAq0nDtAafyu3xyqANk6d8jPyoWe4
      U1/Ekt+1XLKO6yIAjcmMSVXC8QMVZBVmEqpTXLizJ7jpaqnE4gklPiWfyNTVvHzkBI4Z8Vwi
      WLHENSYkdyJzgYCr7xJnOyn62EryPVYO7dqG1S2iDolhQG4mkdfgC91SV4XHV8KmTeUolDrM
      CWlkpUShVyku2v2VK7K49b4soJuGzyvY1ci23Z2MfiD/TB+KZsTMaACs7Ze/7bpMgoMzxnLH
      /AxOLX+Vl157mw+3Haa+y0HgzN5awO2kuaIWISyVmMgocvLT8JQd4uSlvOgkbjCdtNT7aK4u
      oa6xmZaWBsr2reft9cVnY+pfDSGZ48nSdtLa2kJT7Ul2r1nOqkONCFe18SrSeWwtNTFzGB57
      ZV36+kSHNiQycdE3iM0+SU19Laf2reTAzkPMuHchozMi8Du7Ka/twDgkkQgt6LJyiHO/weFT
      dgoLg65LkyS+KH5ETGQWTmZCbChahYC97RAv/3kLJ6YPZcTnj1w+k9Rxd5M6DkAk4LHRVLyW
      F9/dRf3I+0j9sgZAzmo27/Iz5u70K458fcUCkMvlqFQafMIlXNvOv04bRtbQsWTkDWXE0CJW
      vPwua7ZmMShuPEJHEUVHqmmu/BMVG7XIAnZa+rqwHyjFUThCGgZ9pUQSneBAoQlHpwJQYIwd
      xvD4FTRbgKsUwDlkKDTBJBUMIub5rfSIIqlfygROoOXoDloSCpkVfeWB369YABqtnihTEAeb
      m+l2DsSgk+Nz26lp7CI8ejIRRnA7LHhFFXqdDoVKR2hcPHGhOk463AQEgc5jRQhDH+LZn8wl
      /swXq3Pbs/x45X4qnMMp0EtBT746YsnOD7Bu1wnGLMg5HZ7G20htk5mEq07fZaWzFYLCDGhU
      cmRiAE9nFz1G/SVConwxBEc1e48oGXJLKkGX8fr6LK5YAMrgcPLHDefEiv1s2qBhSFoofRUf
      sbcrnsnzhxIpg7qP3+WtIhnDRw4lKkiOvaGYwx1qBs/KwKCxsOZwBVGj7yfVaDibzl41ZBjR
      S5Zx9ISVwSNMUtyf64YfS2sjLV02PG47da19tMvLKNYHY4hMIjHCRPbURRx+aSVLdRYK4tX0
      lO2javA0bg+52ro72fKP9/AWjiEnPhiVp4sju3ahmXEnWTIZot9NT2c3Xk0IkWYDclsLJ2q7
      ACu1ra10WdWcLFZg1EeRmR6FWvDSdKyI3vgERseGozx/LdXdR31TKxanD0dvA132TiqKi3Go
      jMQlxhJq+ByHGEEQLmsMJ/odNJYeYOe+IlosXjSmJIZOnsqIrAjUQMDeyokDe9lXUofVJaAK
      Cidr2BjGDU4nWNXA6n9tImTGA0xIO/fJCvha2PTGKnwF85k7NEYSwHXDSeWOdWw6XM2nlv9J
      HHUbc0ZmEqTy0dNwjI8276em14cpdSRzZg4nNuii6FNXjKenmj1btnO8vhu/IpiEgvHMHJ2N
      SSvH1VrKug93oRw6l5nDE1DVbOXZZYcvKkMVM5ZHHhiLKWCh7OOTuMxJ5GbHojm/03SdYuWG
      7ZQ3Wy+8OSiNW+ZNJS8hlGCD4fL+AJ8lAAmJa40YcFFf/BGHm0IZN2UkUTdgGGyQBCBxsyAK
      Puy9HdhlEUSb1TdkBCAJQKJfYzAYPjtL5CWj9UpIfI2QfIIl+i1SiiSJfo8kAIl+jSQAiX7N
      lRvDOdrZteJvrO7L47F7bycz7PNvOR+hbTP/+8w6Rv/geWZntPHRv1/mnY4B/P7pOYRdg40W
      iavH7+7l2PrXWbL+MC02MGdM4ZvfXUx+xGUyolwBAY+F4xte4611h2i2ioSmT+bx7yymIDLo
      kk4xpxHoKt7IS68tITD+f3h6dg4GFQiuTo5sWca7H+6lya1m4K1P8b27hhF0NnRmAFvNTv7+
      wlsUtbgIShrOHffdzcS8aD7paVcuAMGHo6eV5q4EPJcJ+f+Z+Gy0NDZh9QCIBPx+vP4A0lT8
      5uHgmz9ns2Iu3/79EyQafTTsfJVn/ryWv//+jqu2hTvy1s9ZK97Kk797nCSjj8bdb/DMc2t4
      4XeLCb1MjjBvTwU7D7ch1+hA7kYQQfB0c3DtEj5qSuTxZ18mSdfJhr/8nl+8IvDMI8MxygP0
      HlnGb5a1seC/nufpWBXWunq6lH48cBUCuAgr1UcqCUQnE+RqpbXbQUAbRlpGEmadCpnox9Hb
      Rn1jK1a3gMrRgvfsvREMm3cPYQ4dRp0Swe+lr72OhtY+3L4AMqWeyJQMksP1kmnEDSRz/s8Y
      ERl5JieAjrQpEyl4ZTu1wOCrLDt17v/wzHllp06awJBXtlIrioRe9CuLCD4bZUcPYdUkMmJw
      M8fOHHf2dNHcY2f4/NlkhamBJG555EGafr+WIx3DmBjSyJadPUy6/y5GJgWjkEFEZjaf9mq+
      BgKo4u3//ilttzzGrAQLNTVVFJfbKXzg+zw6IQFndxWbly3nQKMHY4iJYFUb57bXnJRtepXf
      n0rnpZ/diwkLJbvXsL/Bj0wQcLbX0xdzC09/ZwFJUkqkG0Z4ZOS5//jt1B4qwTk4i7hrXraD
      uiMlOAZlEHeJt78ogqWpmKOVHrLmjCb86P4zAgBBEJHLNBj057zUVEHppKf2Ut/kwOespFwV
      zNiuMjav2oPdr8AUm0HeoCyijKovnyb10shQG2MonDmbmdp6lvz41+wqbuHh0eE0HNnC9nKB
      Wx79DtNywpE1LOPwtrpLlqJQB5Exci45c5Iw6xTYK5fz4++t4OPbFpCUfm1aKvFFEfFZmzi4
      fTvHWgTGLhp10dvz6spu4fCO7Rxp9DNq4XQiLzX68XdzZMs+dHl3MyRBT8PRT87I0Or1aORO
      jh8qJXPaAEJVAtaOejrsMtxuDy6rBVd3HWV1CiK1Cvw+G5Ufb6alx8WsKcOI0H2pNKmXRqZQ
      EJaQSpRRAyhRyRUE/H4CHhcNJacQIyczMDsSjQIEpeqywxmFUoa/r5qVS16nusuGz9dHk6sD
      q+QqeWMRBextJ9m4ch1NumzG3zqWgQlfLEvkFynb0V7OppWrqVdnnS47MYyLZ8ABOj5eRpFx
      Eg8VxvPpAYAqOJIhoybQtnEFv9neiw8NscnZ6AJKtEBACKAMiWfomOkMSQlDiZfO4q28fqCC
      +o5sIpJOB2C4Pi6Rn/ytooDb5UGh1qL6vJpEgZ6GXbz295XoJt3NY/cko1ec4sUnXrieTZS4
      BB5rI9uWvUdv5p3cPS6dMIMGxTUyi/E6Wtj+3lt0pN/F3eMzCA+6XNk1rH15I2vbNrJ3+ekZ
      g8/Rg4P97H13EN964fdMyh7NHbE5WBweBOTIRS8Hlx9BDA8lWG0mgIDBoEEplyGTaYhISSGq
      5CR+pxuBGyAAhUJFWJQZV3073X0+YkLkeNxuLr14JGBvrqJHmcadU8aQES7gtNQil+yRbjAB
      qja8THH8vfxoZhaaz7/hisqu3fASh2Pu579nZV/0Vr+QDB55YzWPnHekYtWvWMcsHpk5BKMq
      gM8bQKE3ExOigICblpNrqOybyl0ZChRCBkMs+9lZ3EBy+AAMCgFbWxt9Ph8KvfbsBth1FYBM
      oyd15FjiT2xl3XIT3bkx0FDOpUc0cgzRSZjFdexavwl/mpau6t1UenwXRfOSuJ60c2BHEyGz
      Ozi4u+PsUZksnIFjB3B1TmEdfPxRA+aZnRza3Xne8bDTZfudtDW14dGFEx9t+uzO6XfRWn6I
      o3VeTCFaZM42Dn9cTf43vkeCAlAkMnlBPi+sWMNqoYN4rYemylrC4oaREn0u/tSVC0AVRHLB
      VG51JBGmA4hkxPz5kPzJJomJrPHTITgOmVxNTPZE7rlPwY6DlRSXeCkomMCi+SlkhQGoickd
      w9yICHQaFfqEsSy808GO45WU1CQxfMrtfMMfh/Hazb4kPheBqJw8TpUf5OB5R2XyDBKvWgAC
      UbmD6aq4sGxIJ3FMFqr2Crav2Ylu5CKiLyGAkLQRFBCJWg7ItZjMkWhK91JcbQNDNMPvfoKx
      qZ98V+SE5s3m23oz6zcf5YhPTWzOCCaPyiP8vM+aZA0qcVMg+p3UFG3hUEs0k6cNJ1In5QiT
      6EeIgh+HtQunzEyE6cZ4hEkCkOjXfG6OMEkbEl93pBxhEv0ayR9Aol8jCUCiXyMJQKJfc8Ub
      Yd6eBta/9lvePtCLSqlAJioxZ43gzvvuZXSq6Uz+r2uLvbWCZX/9P6wFD3L/7cMxX/sq+hei
      SMDvo7t6B2+/t5P4OT/gjiGh550W8Dk6Kd6+gvUN4dyxaB7Z0dfGHv102d2U7HyfdTXBLFi0
      gIExl47qLIoiflcXx7ctZ9naAzS7FMQMms93npxBol6NKAZwtJ1k0/vL2XyoBqcqjFGzH+e+
      +TkYRQF350lWvf02G482IQtPZ/rC+5kzKhm9Uv7lzaFFIYDLpiFv5lN888FxhHksfPzub3j5
      Dy8Q+PmPmRh/7d0aZQoFemMwfu3lLUklvjh+WyP71i5lVRHEhAs4vcIF5631B1m5YgM13V78
      8aH4hGu3GmhvOsLK99ZS2e1DiB+AP/AZZYtuile/xCZrIU89+yhxOg9tRTW4FQACzuZiPly1
      E3nO3Tz7WCZaTzeN5Z04AW3XUd5+cTvqsQ/zz+8mY6/Zy9LlS1nLXcwbk4L2zNjnqm2B5BoT
      g+feRvLOf3G0tJmJ8XF0Vp2kwh3OqNw45DIBW0c9la1ektJSMRuUWFvKOFXThTMA2uBIUtJS
      iAzW4Ld3UF1RRYfNCyoDEYkZZMaFoDVFMWruYhyG+NOJ1bx9VJ6soM3iwC/K0QRHk56RTHiQ
      hkslGpS4EGd7K/7c2/nFnBCKVn86RxjYO3vIXPg95nkOs+xIzzWt29beReptTzPXf5wVh1o/
      81qh7zg7yyJZ9KNpJBoAVMQV5p0+6bdRW1ULkUOZNjabYDWgjiBtWAQg0Fh2CnHQCG4pTEOr
      kKNNK2TysBb21pXRUZBMYtA19AdApkCllKFQKAAHJze+yXOdY1kxYD5yhZeWkm7XRV4AACAA
      SURBVI94eWM39z/2KCPielj7yqtUaNOICVEi85fQ5p/HjPwoKncsYdlBN9Hx4WhkAsVVDsLu
      HEeIvZ29y16nOvV2nkiOIKLzJB/tK0FUiuCz0tRkIXbM7dwzbRDBGmla83kEZ4xgMpfLEQZx
      hbcSB9jKr33dscNmEgvYKz/3UlzlB6kyZ2M9vJZlzX34ZAbiBg1n1IAYVC4bHV0tWAJGTmx5
      n9ZeJ0pDNLmjxpIbrcHvB51WheKTMblcT1SsGdp7sdp9cCYAw1ULQPD1cWLjBhqVmdyRHQF8
      9t6BaCnj4+NuJv/uYealK3B21dMRCEZOgKrjB/ClPM0D3xiOzmOhvsGGXnmJV7oxmckLckmI
      NKIK9HFg+d957fgJZo/OIlgj+U5+XbB2dWDr1NFsj8MUGobf3c3RVe/iUj3GlAgfto5GWnyh
      JAebCQvT4e6rYct7bXDPPSTHhtG5voTjSRlMyAoHt4XO9na6bHIC/nMG+V9SAF0cWvdvGg+9
      i1IQ0YWlMevxexgeq+PzBCALSSctuJk1Lz6HdfJUJo7KJTlCj0zwkpScwPLNb/P3QCuTJ44h
      Ly0erVJ+cX7XIAPdm97kzQNVdDm9uHrbaI6NJiAIl6pS4j+UQCBAeOZwJk4aQLBOBX4ng3Qv
      8cd9lUyZG4ZMayIjdwyTRiWgU8nx2VrYtfJtdp1oIXfMaGYP386a9/7I+x1ONKZoUiM0eDUX
      ejZ/SQGYyZ9yK3eNtPPa/72HPfsOhudEofsiow9NBo/++e/UlB5lx453eGaJm6Hf+A4PT8oi
      f+HP+OOwco7u3cE7f1jJPxLm8JsfzCf8wsdC+ft/4IWPQnjs+z9lkFlN0+7XeeH4l/tLJG5e
      ohKSse+2odapT8/tVAbiB2WiP2kBTRzG4DA6vD5UKgUyGagMZhIyEqhutxFQx5E+chZP5E/G
      GxBBJqO7dBt7GsFgODdK+JIDZjlqbRCRBbfzq/+9D8OxF3lhxTE67T5EFCiUMmQ+L15RJOB1
      43Q4ObvQ4OyjTzCRPWY2T/30GR6fFsGBvUdxOB1YrR5Ckocw56Ef8tvvLyCkYjd7Wj/9/rdQ
      X9FM6NDpjEqJwKhV4Pd58X+ZGEUSNzWK7OEMqtzK9qpePAERwe+kpaSaQHQYar2R2PAQ3CeP
      UtbpJCCK+B19tNS0II8MQRnwYnf5kGuDMJmMaIRuauodBJuziQ45N6y+6jmALnMO33mgmeeW
      /ptX5A/z4Ox84jNSiSoqYfXWMKJUfpoqW7D7Tq8zi61HWbq9k8zEMDQyD/XtIqkpcShlNg6v
      /5DOkCTCDEp87XUoY9NJDP50E42k5g/AvWEtH8Z3ESq6qClpwOKWdge+GF46Kks51dCFy+2k
      orKNDusuttiCCE3JZ2CykcZDe6mzi7hbS6mrsaNS6WkL1ZA8dCoZV/WYXVQf2EeNVcDdVkZt
      dR8oP6LTrCZpyFQyjA6a6ppwG6JJjgtBqRvE9LkHWLl6Od4BSRgEC1WnNCy4MwPkOpJyh5BU
      v5Fd69bQFBuCYG+j2ZHOlLwYcDdx8mAJbS4RnVrE2tFCLzFMGpZB0HnTSsUvfvGLX1yqqaIo
      4vf7L3UKuUpLZHI6yTEhqJFhjM8iNVRJQK4jMjaexKREwjVeOjqtEBRFelY2KYkJZKUlEBwe
      hdHXQUtzO91WN4bEAmZMHEZMiIlgo4zetmbaOvtwKSMZdst0RiaFopCDTKUjKjmDpGgzkfFJ
      hAhWOnodqMLTKcjPJjkxgaykWLQqxSXbLPEJPrprT1FW00i3zYXaFEeo0o3VakUekkBilIam
      YweobLfgFDSEmYzgdWCz2TClDCbW+Pk1XB43dUcPUtHWh1NQYzYFI/M5sFqtBCfnE+IoY/um
      3djMGaREB6GUyQhJyCZWY6G5oY0+fxC5k6cxPNGEQi5DaQglMSEKubWd5rYufPpkxs2aTLpJ
      AQoVSm8fzU2NdPQ60EbnMGb8aFLNmrN7Sb/97W//n5QhRuKmQPQ7qD3+EUWdCUycmIdZK+UI
      k+hHiEIAt9OCh2BMQcobliPsukaFkJD4osjkCnRBZq481/vV8ZkCkMulXVWJrzeST7BEv0XK
      ESbR75EEINGvkQQg0a+5qlWg8pW/4JnNIfz6uSdJ16k+/waJ/wBEbC0n2PDum6w7WI9LHcmo
      277BvbcMIUJ/9ZuMouDD0d3M0a3vsaYujLvvu5uC+EvnHhNFkYDHRmvlIT54cwfaibexeFbB
      6TRNgoeO6oOsencle0sbsXpFjPH5LHz4YaYNikUn82FtPMaKt99my9FmCE9lyvxvsGhSNiat
      4tokyBD8PtweHwLSPPprg7+bTS/9i/rBT/LCd7JQdRzjrb++y2tBYfxwWupVr89b6j7m/Q+2
      0dDjRh4VyWca8Ip9HFn7HltP1mP1BTPAd15PC3iwOwXSpj3JHT9KIlgL7cc38saSv6L85i+Z
      oj3Ektd3YZj4bV7/STK22r28++77rNHcxaKJGWcNN6/ZPoDgd9NZf4qyqkYsLj8oDSTkFDIo
      NRSVt4/KE8V0K8LRuzuob7OgCo1jwKCBJJq1yPDQVlbEiZp27F4BpS6UlJyBZMaZUQh9lOw/
      jCssjXBvM5VN3fhUUQwZN5x4g2T2cM3p/pj9zun8ZE4uJjkQV8hdtxfz9MpjWKalXmVwXHD3
      uchZ9DS3uY+w9EDLZ14rYsGrG8GjP1hAxfLNNJ5/UhVMav4EUs87FJYxkrykHXT3umjrq0CW
      N4JbhqWhUcjRpBYypbCBHXWltDnSSDGeVsA1mwMEnBZqy45R3thBn6WPtpJNvPivtzjeIYCn
      jf2r3uDf73xERUs3fV1NHNqwhHfX7qfFLgJdnNhznLq2HvosnZzav57X39lAVbcTn6eNjS/+
      mVc+2EllSxd9ffXsXPIv3tjT+LltkvgS+H34dfqzPrMAwdm5JFc3ci2eePSQ6YxKNqH8Aj1P
      Lk9m3KwCIj9v6BXwYe+q5+Dm1dRqhzMs1UAgIKJWKZHLz/cICwOZDZvNd/bWa/YFkGtNZI2Y
      SZbBjEmnxN/zMY1PPMu+ivsYln/6Gl14CsMnTyM+yMPJbW/y4oadlBYOJm6AiYHT5zEqOhy9
      SqDn2Cp+848iSjstJCUBchXG6HSGTxxBqK4bzYndvFXSBLckX6vmS3xCWC4Zlr+z6sBAFg6L
      RR2w0FbTSI/F9jmuTl8FFkq2rGX1xsO0+rVkDh/H5JnjyQhR4EqMpGPFUQ4lZTItNwLcfbQ0
      N9Pep8AfuGqPsItRKATsjUdYtmwdxxq68fo9WPq8THSeS4qqN5kI0qiQK5VEJWYTKhynqb0b
      z4AU5B3r+P2fN1HbZsfrddDZFU9BIHB6zKdUERQWQZhBDShRKWUX/BES1xBtKoseuYWlb/yS
      h/+vD3lQJINGp3CZtD5fMQZShk7lntRCbL2dlB7cxvvveLnvqfkkp45n8WQP77z5M95otKIN
      TSA30YTfkHhBCVchAOG0C6JcgQKBzup9vPrv9zHe8hTP/yyXYHUbrzz5FL2XulUUT/9TqdCo
      lAROvscPfr2R0T/6Lf89NAp1825++ccdX75pEleBkqicGXz7t9P4JBqK0LKRn5a7SP5K23Up
      lBjMURjMkYhiBgNyczm46u8s/yifH85MJmnkfH5UOOdMEvYAzQfXsL1ejsl4zuLoiuYAoiji
      93rwCyI+RwOV1VaC0jOIUoDL2YaXaHJysgnRgqO9hS73hatDAZ+PgCAS8PRQffIoPYEEEqLD
      cLY2YQnOY/yQWLRyL729PdjP+3JI3Fjs3R04A3KUSjkBRwcHd5wgZtKQa5gm9eoRfB562hpp
      73PiEwCZiN9jw2rzIgYEBL+Lvj47XkGGUiHD21vLiUobweE5RJm+rEeY4Kf52Cb2N7jx9zZR
      7kpk0cJCtEoVweY0okMPsOfDJViyo9C5G2hyiiSdd3tv1WE2rOlC6W6jvLSH3EmLyEkwYpIX
      kKd+l/feXM7gSDWBjlN0WW++EWd/of7oOoq6glCrRLyWDloC+SwaeS0ytTko3baJkz0BPB0V
      lNX24fLIqQlVkTl+EXkhVmrKa3AaE8hKCUfZVsT7uysBB9UnSunTduLz1WA05zJ5RCQ1R7Zy
      tENJsEGLQibic/bQ4U5k8uAEFJ52Th08Sk2vC7VcxNHXi8eQytTCCz3CrnAIJEOjD0IRsENY
      FreOL2BwWiRKuZzgmDzm3e3j6MkWPHI9SaMX8K3wBNwZRjgzEFJrNcgFP2ijGbNwCkPzsjid
      5X4sjzwR4EBlH6ImjEETFhCdZiUsJgS1Ws/kxQ/iS/kkw7iB3FkP8Igm7Rr8IBKXIi67gNaj
      VXQ5RYIShrJwyGCSTNci3IxIwOfD6/UjC0lmRMHpY16vl4AgYGurYP+O/YROWEwWgBDA6/UC
      KhIKBpMA4PXi9QdQ6E1kDB2Dr6Scpi473gDoIrOZOWMEGVFqCESQlhJHr7OaPjeEpQ8nb/Ag
      EkMv7PI3xhrUdoo3n32W4riH+On9YzDfaKNviZse0Wen6tgWjvWkM33SQEI0NyZHmOQQI3Fz
      oNSROGgq0egJugGd/xNuzBdAFM8zlpAh5b6WuBn43BxhghRpTeJrzmcKwOO5KCihhMTXCskf
      QKJfIwlAol/zJVaBRERRwNZwjLUffMCOogYcfhURKYOZdtsCJg5OxCDJ6j8YEa+1kR3vvcoH
      e2twa2OZsPghbh+TTpDqxv6wgZbN/PgHr3OB0bQooNCM46evf4t0RwdF21ezessB6rqdoI9g
      5KyHuXvWIEJcp3jnH6+zubiRs7afooggpnDbjx5j7pBk4DNWgS4XGEsMeGg8tIaXl+7CPOFe
      7po+hAitj9aSgxxvFhkwfiIpQdf0OUjcSAI21j33E06kPs4Tc3NQtR3m9b+thNnf5lvj4r/i
      FFUijqIl/Hx3Ar/69ng8DacoqmggdtAY0iMM+K01rHnzdWojF/LU4sGfijEk4m05ypItVWSP
      mcaIdDPGKw+MJeLpbWDPtt3IBs1n8cxCorQyQElc/gTi8s9d6be3UV5eR587gEofRkJKEpEm
      HXL6KD9YhTothwixk9paK6GZaei6S6l1hhFlcNHebsGvMpGcnoC8t4mG1l4C2lASU1OJDtEi
      DzhprqqiqceGT5Ch0oeSmJJMpEmH6O2jtrwW0RSFzt1Jc7cdUR1GVl4WRl8v9TVNKCKTSYgM
      RikT8Tjaqa3qJjgpg9iQa5/f7D+Onn3s653GdxbkESIHEkZy7+2l/GRzEfZx8VxVaNCrxdPB
      zn3NjJ08Gz0y9IkDmJQ44OxpeXA8Q0fl07mnEytcKICAi5rKBjSmCJJjQs+O/a9QAAI2Sy2V
      LTIyJ2cTebn4jc5m9nywgn0dckxaEYfNiTZlOLfNHEOssYp3f/NHDA/+gIE9G9mwD6b/4GGM
      m/7IC+XDWTwzEXtjHaWlbYQPG8+wiAANNVVU1nUTN+ke7rt1MCHOOvZu302bCPKAi86WHgz5
      s3h47gjUjire/+uf6B04jwmJAs1tDZQcbCTvyV9xd1wzO1e8Smf2HTxy2yjCVQE6SzbwypJm
      bvnu05IAALwevCYTxvNGO6bsgST88whNwIDL3ni9CdB7ah9l2mHck2L41DkRv9dOR3UJh0ss
      RI8YTuinznt6m6hptRA2YCwRhi8dHl3E5+3B5dJiNBiQA5aSdby+5RS+gJKozEKmTBuNqmQT
      7xaLPPWDh8mJVNJdvJF/rjhM0cABROYAfhftNSeJjR3M7Y9nkJkQRhUyVIYoBo2bQ0aQjY/+
      +SzLm1wsnjOfSZMt7FzyErvqmrB4BxOiimDojNuJTghHj4uyja/w/K5jNE3KI1UOyOTozIkM
      n1aIWdfJ8qrvsul4Mw/nx5ObE8u7FeV09hZgDpfRWFqKkDyJnPhPP9R+ijmDlN532FKcyy25
      kagEO10tnTj7bLi+ynZ5Ojh8rJf0vAJCtee6rav5OBu37aK8qRtRn0zesNGMGprABa8ywUt7
      YzWdrggmZoRf0Omv2hRCG5PDhLGhVH60lM2HghkyMR9nSTkd9Y28+Lta5IDosdLUbCRpjpMA
      EBDkqELTmXxrIdEmDXKgGlAFhRMRqkeJD4NBjUEZRUSwBiUqdEF6VG4RREAfhK92BX99uYQO
      uxu3tZ3GQD7OgHB6XUutIzQyhvAgNaBCrZLh8/tBZSIjO5ugfQc50dZNkslDaUk36XOHEqW5
      2ifxNUGXzuzbh7Jm1fP89DUncl0oaQPD8H6lDjEiPdXHaVSaGZUQjfq8VKAqUxx5heNJyLTR
      1VpP7bFtqMJimTrAdHaY43PZqDlZhCHnUWL1F45arlAAcjTaaAwGG+1dXfjEYDRhKQw2RiAr
      X8/mcgAfLrcPIWkKP/z+bLSKcwEoDKZgNPSiUGkIT0onxqT5UpOq3n2v8vu3mpj15OM8kBiE
      vWQtf1ln+QJ3KgjNHMiQ6F0UF7cwUVFDqaOA+4dFIrnXf4KK+MG38kDaOFzeAMgVqOwH+WNR
      HzFfSXtERHc7J8p6CInNJyH8wj6jDAonbUA4oijg9+RRf2IXe7ZvpS55Iam60/fbWw5Q1DqA
      hbeH8engPVe4riXHFJbJsEwDZR/v4USLHZ8gIiIinE2mHEJiahRBDRVUCFpCwyOICDdj1KpA
      dsYmSCZDrlB86RWFpopinOnjubUghciQIFRyEeELmjTJdcmMGptJ26mD7N6+G8ZMIjdIWrc9
      H4/TidIQSnhEOCa9jNpDJwiZOOyrEYAo0NtQQ7NTJDk7jaCzL9QAHqeV3h4bHr8AyFGo1CgV
      4PNacX/iTyU4KN6yj9Apk0lQX9zjrngIpDRGMOyWOTQs28iGFe/TnJOIUe6lqUNGTHQEeiUk
      Fs5g6sFXWfGPd3BOzCZYEcDe4SVydCH518CvIjpzKGF7d7J8i44UlYv6Y2V0Wb+ov5Kc2EGj
      GLzyeZbskfPQc7lIU98LqTmwhmpfLEatiKOjlpPdWSyYei0cYq4UkYDXQk1VJRgLSI853yfB
      R2fdMfbta0abGIlRrUTw2miqqkWbNYWE4NP3O+o3s69rNA/kB1+yhitPkSRTYDDHkZWdhMbZ
      RWNTK529TgwpQ5k0bhjJ4TqU+mhyclPQONppbeukz+nHlJJFTkosRrUMwa8naVAuCaHnup4Y
      8GGIzSE3NRw1IATAEJ1CRrwZpRwEUUFQeDzJCRGExSYToeyjraUbnzaOwQUDiU9IIDM9AZNa
      DnI9CRkDSAzTASKCX05oSi658WcegtaIr2orh8TxPLowH4NknXoBCtFJQ2UVjW29CMGpTJo+
      lrQwA/Kv4DkJXg92l5vInMEkGM9/XyvQaQ0oxD5aGhtpae+kzwlJgyczaUwWwQoAEXtTPfK8
      ceRHXDzJ66cpkkQ8bcd49f9ewzb1e/xoWspX3SCJr4h+mCHGQsnW1by/4gCBobN5ZPhX8VmX
      uJnoZ18AAa/LicvtR6EzYNAokUneOf2Wz02Sd9ohWULi64lOp7u8ACQkvu5IKZIk+j2SACT6
      NZIAJPo1V2wNKga8tJ/aywdLl7O7rAO3QkdKzgRu+8ZixiZdjbW4iBDw4nL6Uep0aM4EkPc4
      KvjXf/8G5/T/5b9nZ3xmCa3rn+G770bzi7e+SQ4i/p5jvPjrf1Ca9SgvPD5Csvf5BFHA53HR
      fmobb7yznYRFP+f+4eazp929Dexft4QVW4tos4EpZSwPfvtexiaF3liHGFFECLhpLd3N8neW
      sb+6D3lIOvOe/B6LCyLwWls4uHEFK7ccpL7HCbpwRsx8iHsXFBLtL+fNv7zE+mP1nF3KEQN4
      vMksfua73D7idGTBKxaApfkIb/7tNZyjHueF/xmNWWal/OAm9pe1XaUABNqrPuDZZ/Yx8ke/
      5I4hoWcb7bbbThtmfV7rvE5sNjcBQPD2cXDNhxywpvHY/Fyp85+Hz1LH7jXvsbpYRnSIAo//
      wnWQolV/54hmNj95/gfEBflo2vsGP39+PTnP3UPYDWyniEhX5Q6Wrixh4P2/5ZsDwhC6qjne
      dbq9zj4bgbABPP7rh0iLCMJnq2Ht66/w2nIl332gkAd+/hceOK80d+NB3tpcRbo5lE/2ha/Y
      IcZuq6GlL4wxA3OI0MqBEHLG3UnO2Uu89DRWUlrViM0rxxSTSk5WKqE6OfTWsONoG6mjRpOo
      BxwdnCitgdhsMpWNfLTnJO22Tko/3sq61jCSCoaRekZTfmc3VUV7qW21EFBHkDdqCLGXyxwi
      +uip2MfWY30ULrqLwWYDIOJ3W2isLKO6uRevTE9sVh55yWbkuGmrLKPOFkzugEg6Thym2R9P
      /uh09LZ2KsvKaehyINOYSBqQR3qsESU++hqrOFXdRLfDi1xlIDolk8yUGAzKm3tvwd3ZCXl3
      8qt5IRxZ+WcqP3U+c86PGB4WdmZ8rCJx9EgG/nMHzXBDBYDgpnrfHnSTv8O03MjT7YnMZOSZ
      MLEhidlMSMw+e7ncGM/g4YNo3tODHbjAw8PvoLK8DnVINClxX9ojTIZWG4lJ1U7RoUMMTRpH
      klnPWQM9fLSX7eL9VXuxGsIxq0SKDuzh5ND5zJ8+hIimvTz/p+3c//IZAfRWsuattxFveYqn
      ciy0d1rx+DxYuttpVQcIyfYhGgGvk87aU5QFBdHT1cSxHcsoEn7JT6YlXrKVPmsL+3fsxx43
      mjsLU9CrZAgeK2U7VrDqQCv68EgM/i4+2nWIzgeeYFqmi1M73mdpTSr3jZezauVu5PGzic8L
      omTLavZUOTGGGJE5j3DgSCWz772LIbE2Ko8c40SLDVEF9q5mtu0+zux772FsVvi1yzxyHTBm
      jGAyEHD2XfK8Oey8bu6zcmr3EVyFA7nR++aC2EbJYS8hmWV8+PYaOh0ihuhsJkweSYLxfMNm
      AZ/HRkvZEfYcs5A4btxFHmGu7kZqWq1E5U0hQv+lPcLkmGKGMu/OOlZuXc1zv9lJ6oDhTJs3
      g0GRWrA2sWfDZqq0I3ji3lmkGX2UbnuT17etJyUrjamfUbIycRSLFzTSWCQwctY9Z4dAHnsH
      yJUERaUzaupIzLoejBXf5q3iRriEAGw9e/j3MxX/v70zjY6jvNLw09Xd6k2ttbW6W2u3ZG3W
      asu7jXdDYpaEMPYkMDCQSUgyQJaZTGYmGc5wwkyYmZyQ5CQhCQQHCAbHxsYs3ndjeddq7ZJb
      +9JqqTf1WjU/JGzAAmKbyGD3o6Nfdaq+W3Xqfl1f1X3vi88fxeqvLCQjVo0MCaetlp07TqJe
      9jAP3FaAPjjIzqf/lZdePsasH5ZOXEZbPYfqC1l87zeYOSMFecdZjtQPMXPN/awpSyU4VMfG
      p59m35n5FKaaSK9YRnZULDF6Be7OE/zuF5s509hNWa6BqWsPP0tIBOydHHzzbWqd0az8whzi
      Pn6nTziEYXovjKHrGaUwwUSmwc9I6wF+/bKM7z+0ED3gvnCCP29/m3qrDUXcLBbdsoy5ZTMu
      U4T1W5sZHE9mdU78tSjCZCg1ccxasQFj8XIGrC0c27mdJ/95H6u+/iPuSeihrdNH2rpcUmPV
      yAUVM7KLiX37edqtA3iTrvJCKCLQG5IwRKq4ZJE0RaUqoNHns/z2Us5v3UXfwDBe0YhKJuHq
      raPTqWVtYT4xKgWoUplfkc0vn62i3T6RAC5/NOWr1nBLYTJKwU3dznYaDx3keE0Dr6oEpFCQ
      UWeQEssIPsyoPOd58fkdnDo/gC/oZWRQxaK5/k+nm9CVIIk4u6vZumkbtqT5rL1zLuaE6yGH
      F1GqMqhcsYLKWC1KQcJXaWTo37dwZmQhS+JAlWDhls/FUO5w0Ndex7m9m/Fqv866WZcecwKe
      MVprThFV/BipmmtRhE02uZVHRJJo1JGQmsHM8kVk/s+9PLfxLSq+nY4oMuHMNzmOTCZDhogo
      To+bsEIZx8zFy7GMXeDXO1/nhCWVW/IMIAYRkSEIl9YNcrmAJPoJTbZA1Senk5kSi0KQASKh
      YAB11lK++a0HmXux14sMhVKFYD3Ej//vRTwL7uepb5WgdrTx6m9f4aONPz8buIcaeX3TVoS5
      f89DlUZ0CuG61EzJZGmYsnuxO9UoDQIyQB1bSFHa77G5gDhQaGMxZcYiSRIzCwqwpO9n1643
      aDF/mVwtgMRY5wFOD83h3rLYy274K/wOIOG1d9PW3ofDG0SSCcgJIigjkUdEoI9LJt2koKup
      k+ExP2LQQ7+1HhtG0o1JaBQKlATx+YKIIT9OpxOP99JMLsjVKOUBxse9BMW/XOV12YWTR1O8
      ZC2LjT1s2ryfzrEA2tQCjGo3Lc0tuAMhQt4Rqk43EZddQVb8uxdcxsQfgIb4RBNasYfmrn6C
      SjVajRoh5Mft8eIc7mdAZmTJ/JnE6pSEfE5c7huhdipI686X6Mq9j7sXphOplF+3gkGZkERu
      qY6qvccYcvmRxCCe4TNU96RjigvhcdoY6B9hPBACJiZav8+DT/QRfLcbVmiUMztPkbJmKanK
      a1WESSHGus/w2mvNRGWlkxipRPL08U5XIivunkdKTBKLVi2ma9sJtm91YNSG6GxsI33eOkoy
      Y8GTw7ys13ln2xYic3TIR1oZdHgnbZQE9DEFFOXvp27/n/nzUC55FZWYo6/u4gmxFlbdtpLq
      p3bwwsE8/mV1CatWV7PtxGu87Mgmxt/Fsd507rp/Man4ab7sCEqSs8tYMaea7bu3wnALKdFK
      gj6J2IxZVBqzyY86yr5trxMwG5DGOmjrc3yqfLSmxkd/w1mq2wfwjHtoaehhYPhttg1FYrDM
      oSwnyPEDHYhL63h7W93FvWSyFOatmzOt5yeTCcxcchf1L+3hlVf6MMbKcfd3Ii6/leLIAIMN
      dRw62AoJsWiVcsSAm+HeIWKKV5GmBxBxtLzJMecS/mHW1I9wH6oImxoBdVQiiTFy3GNjON0e
      Aoo4SpffwdrKNNQyOVHJGZhTo3DbhxjzyTGVrWDN0nKStTLQJpBljGV8G3rOZAAADBFJREFU
      1E5AriPNko/Zko0lN4e0OB0qtZ5UUwoKnxOHG+LSMkiJ1qDSRJORm0+6QQvIkCu0JGfnk2/8
      QHYISiKTzRTlz0CHgM6QTFKcDkkZT36uieQ0M6mRIezDo3iFROZ+/gusLDQgIENQaIifkYUl
      MxHNZAtAQRNDWlY2KTpwOZyMByB6RjYF+dnExyeRlhoNrjFcoobMgtmUzcrGlJmByaD/FL8F
      CjJibaWtaxCXL4QuIYMk7UTpe0RcGmlJKvxuiWBoHK/X+55/LZklmdPbGEsmIyIyiYyMePzD
      Aww7/eiyFnDH0nwiFUo0Gj3qCC/2ETsOp4cAGrLLl7G00kKUAkDCMziEpmQhRYbLha+PP/74
      hyvCwoS50QlXg4a56QknQJibmrBFUpibmrBFUpibmvAjUJibmnAChLmpCSdAmJuaq/IIC3pH
      aT9zgDd27OWc1Y4scgaVqzaw/q4SYj75GKfEObyLp761BfOjP+beymmvU/xsI4XwusboatjP
      y5sPkfbFH3Jf5aUSaHv3Dp782rNYo9QXZ0hh9oO88NiyaY5TZLD9NX7y6It061UXY1Ev/AbP
      PrwAJBG/a4DqPdt4dfdxehyQUrCEe+5bz+xUNYTq+fXDP+Wgw32pnCNzKd996B7KMiY+ol5x
      AkgBFy1HtrBxRycFX3iEX8zNJsLTT9PpHsZh2hIApMkCu/B3vCvFb+/g2K43OdwqJzZZxwc/
      hQYHbUTf9QP+8EAF6qkPMU1I+IcdJH3p33jiK6WXxSL5bJza8yZnXel87Ym/IyMabL1djDFZ
      XzbQhzX7Dn752FrilFOLp65YEum193DiWDW68i+xZo4FvRKITmXWslRAxDPSRWN9E93DLoIo
      iE7JprAolySdAk/3OQ6e85E/10BfdSN9jhAxGYWU56WjV8lw9jVRXdeKzeVHlKsxpBdSUWRC
      KxdACuLoa6e2volBZ5CQ0IXjYlwBRjobqW+6wKBrQp2Vas6nwGIkcooCqJsdv8ONpuROvnNb
      JGe3P03bB7a7+3uISFt9nW9+kCTwDPajMq6dIhYRZ08rHR4tc5YsJjNOjQxIMFku1iuND/SB
      MY/IjyjmuwqPsHba+xTkrTYTd1nDXT82axvtnYOEVGokbz/Hqo7TMfpl7lmdz3jLfp79TSMr
      1evJCARxdtVyuKod4atfYUF6NIOtZ2nul4jSKAkM1rDlwGncD3+HtRYNrr7zvPXqVpoD8WSa
      kpHjfU/dvYOOhma6bH4UajljXdWcPNOI+54NLM5L+BTX5VwfIjOKmQeExqdWhHW31tM68BI/
      q1egUEWRVjSPRbPNxERMs7JakuhureG87UV+VqNAoYomvWQ+i8uziVL6GR4cITDioqfuLWp2
      9OFBQ3rRQhbPnUmMEgYH+nDVdvDLwaMoFGoMGQVUzisnPV5zUSN+xb8AwaADny8CrUYzxQpa
      SXxmCcsyKtFHaRG8wxx9+Re8ca6ewcX5k4VUetILSlmSqGfcpKT15wfpGnMREmJJKVzGHWWx
      xOoiEN2N+H74JEdqB1iblUBnzWHO9Uey6r4NLMyJwTP0FnVbWifHjSSrYikWnZ5IrYLx7nO8
      8Mxmalt7qMhLuAHUWdNL7q2Pcv9wCJAIeYapP/wSz41u4JHbcqf3rYkgUHDbo2hHxIlY3EPU
      7N3I8877+cbKRLzjNqztQ0RYsskrNYJ/lKaz29nqV7B+uRlD6Z3cbxjBF5SQgm66G0+xZZud
      O9atItswMXtfw+Q48fT9vh8XSUDuH+LIa6+w+3gzNk8An9tHcoWFwMWyfz0JKdGoAN+kS8y7
      df8hZyfbXniKo80DjAf8uGw20kp9MO6kr6Mbf+IcMowxKIX3O8xIkhKZvZo/PrODkw39+EJ+
      XGN6FpcEPvvqrOtAgnk2CWaYaFUTYFaWgqee2EfTbbnT6hIpkwkk5cxhQkj4biwCP3lyL80r
      1yOJGlLNJSxYsgiTWoFM8jMjSmTv4ZNY55rJSbJQmjSxrySG8M1MYMsf3qG+ow+jIQO4Ck2w
      LtJMguEQ1u5efIUxqN87JXg6eGPjcxwKlPHNn3yPnOggDTufY9Ppjz9yyG/lpf/+X6zlj/Dk
      Y/NI1I6y88ffY5ecCSWaKIHsklzlfftaD/L0zzcjLX2IX32/BI2znc2/e5mOKzu5MACIiKJs
      QtWHDEEegd5kJGG8ienuFS5JIpIkIAhciiXNSLynHR8q4mN1yNWjuD0CMo0MmSyC6Ph0DDFH
      8fpFRI1sQuQkkyETFKjjDMSrVHiDwYuvTq7YI0wXa6TEYuDCySOctY7iFyWCPhe2nkHcHjcj
      DiWmAgvJ0Up8jmG6e4YvWdV/5MkOYbdrsBQWEacScfR30zfqRZSACA0xiTFg62HA5iYkhhi3
      j+KZ3NczZmdMkUJFsQmVzI99uI9Bm/vKTi3MJEM0HG+gx+6ZUOX5XfTU1NOfmohhukORBmmo
      aqDXPj4Zi5Puc/UMGVOIR0l8ygzkwUFqa1tw+0OIATf91vMMeY3EaV10nW+ktcuGNygihfzY
      rR10B0JoddqrXQNMuPKVrbqd4dd2cWT7JloTYlBIQeTyNBbdbmFmThTbTuxms6OFhEg5F7rt
      BP6CUQS5iZnFMRx+YyOvdJuIlDmw2scRAVRRZJctxHJ+B7te3Uh7uhGdspt3b3Ftipmi+OMc
      2rYFd0YiqsAQvXYPVykmu8Hx0VNTxemWPjzjXjpqrdh6t7PpgpbEvAVU5gn0VB+iqrUaTYSA
      EBynv3+EvDu/iGmaI5WkANYzB6hqOYc2QkAW8NDbP8KsuzZMtGhJymZBsZXdp/axuessankA
      97hE2oKlpKhC1FvrOdN7EoU2AiVBxmw2pIwS8tMTLnaNuDqDDCmEx9ZN4/lmekY8yFTRmHKK
      yMuKITjYSXVdE4MuEUPaTIz6cQbsKiyzclAP1XC42k/prRUkAH67leqaHqLyCzEbdDi7azh9
      zopbqcdkySJyuI2huFLmW2KRQuMMtJ+nvrkbt6TDmJeCr22IuOJKchMFhttqOdvUg1eIJiMr
      DaVnBG+0ibysRMIWwO/FR1/9GarbB/B+YIFkyJlDuSUVubePptoGLgw7EQUt8Zl5lOakov2Q
      d+l/LSRJwu/opbHuPF02F6Kgw5CdT3lOCir5xMOLFHTR29pIQ2svHlTMyC2nyGxAJQMp4KS7
      uYG6jn78ogJ9Ygb5+WaSoiasVj/WIOPGc4gJE+YSOp0urAgLc3MTToAwNzUfuTyVy8M9lcPc
      2IS7QoS5aQl3hQhz0xNOgDA3NVdeCySJBAN+gpIcpVKJPJxCNxySJBIK+AkERSRkCAolEUo5
      wvXoESpJiFKIoD9AUJRAJqCMiEApFya2iSGCgYltMkGOMiJisrnxew4RCuIPBhEUKpTya+kO
      DeDqZffv/oONw3P4wSNfpSjxmk4vzKcOiVHrSV7/06scaujHi5qkvEXcvX4dlRnT7xEW9I/R
      VrWH7W/upa7HiRCZxvIH/pEvz04i6LXTVLWT7W8eprHPRURcBqv/9qusLTOiUwBSELetn6az
      e9m8owrz3/wnD8x7v8dNuFQ+zAdw8M7zz9Fb9HX+65FCYrFTt/P3/Or5o+T96HPTWl4iITHc
      uJ/Xjw0x78EneCQrBtHeRaNdAaKf3vpj7D41wrwHH+e75lhGanbw2xefQRn9T6zLjcQ32MSh
      Pbs5ZY0gccbUXU0/gQTo5/CfDsDsNRREWDnxzgUSKudRlBTg1P5jtA2O4pcURCZZmFtZgilO
      g3eskWN72tDnZiF2n6elz4E8uYhbV1YQq/zYAcP8VRmlvy+KOQ8XY9AAGCheOJuonR2MwvTW
      V4kemo5VEbP0e8w3T3qWxWdQEg/4bfQMjRFnXkylJQGlDBLyV7KqspF9J5pZkVsG3hBxs+/m
      259XUbX1Z3ROMcQnkAC97N/4R8ZDRgaGt7KrNoq1OUXk087ZXj/JiQaivIOc2/8KrWNyvnln
      Bf7ROrY9s4mo29ezLFdPXFQXb/zhN8iM+WyYpb32kMJcAwnklas4su8MxeuKiWGU6v1nUJXN
      n/bW76LUx/nTElrzUX7/01p6HRJ6Uynr7lqJWTOpSJHLeXdpIigVJKRlo93TyxhlpKbPohII
      um0fOsb/A/huCdKAf3oOAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='BAd coutries percapita (2)' width='184'>
      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
      NO3/AflNZ9KscW1yAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='BAd green house' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      KZ1z64L/HxOCWA5ReKbiAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1 (2)' width='192'>
      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
      Pw0igGqt1cTrAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Good AQI' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='Good green house' width='192'>
      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
      ywiWG4bn568AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 12' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Top 10 countries by per capita' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAUuklEQVR4nO3dW3PbZp7n8S8AEgTPZ0rUyTrZsi3bsZ04TnuTdE9ne2sOPaeamovZqa2t
      rdq5mou92Yt9F3u911v7ArZqqqZqZqenO5OZdCftxLFlW7J1tERJlEjxfAIJYC/kOHF103Z3
      S2Ik/D9XBAFCf1D48XnwEAAVx3EchHApddAFCDFIEgDhap5vTziOQ7vbGVQt4gRpqoaDPegy
      BkJVVGzncNtfCkDLbHPuv/9gEDWJE/bXH/wHNluLgy5jIG6MXGdxbwHLsaQLJNxNAiBcrW8A
      VM3gw0t3mM8Mv/S8V/P0eYU4reL+OKrqJx2IvNHyyUASTT0b+0Hfrfjh/Ac8ePIvzF/4gFKr
      w+WJK2zvr/HhW3/I6urHPKk7zCVjfLKyyNzIONXyFsul8knWLo7IaHSMCW+Izf2HpP0hPJ4w
      PaDarjEeilLt9jAdldl4lif5B3g9fn50+SOKhbv8cneF0/xFUt8ABOmRb7eJVsoMR9MEPV6+
      P3uVpe0lPltb5MLUbZLJKa7VO8wkdP7Pmuz8p1U8PIbeO2BJCXAhqGH4R9hotLgWThL0GlS6
      PfLtFh5vkvnUGF1Piq3SGmt7p3vnh1d0gR6XKvzljY/46Nw4phbCq4CDQ9NSuTN9ifFEll7P
      QlUV1gq5U/9GuNlBbZMH5TLnI3GyiYtMRjMUa1uMx0bZbPbwOA0ywRSW1UVVtMPhcsvhcmYW
      ZdDF/46Ub58K0ey0fmUY9PL4FTZ3HlPrWSddmzhGMgx6OAz62iOZR5sLJ1GTEAMhw6DC1fq2
      ALMjl5lLjaCY+3giM7SbeT5f/pxi20RRDP7bj/+Wv/vJ/+TOzb9k92CDTx7/nKY7v1k/9S5l
      3yZhRNkrPyISOkc6GOafF/8fPc3P1eF5ziWn+HL9X5lJz2J163z87ItBl3xk+rYA68UcfiNA
      uVGh3Czj90UIeg4Xf2/uHX759C6KolOoF4kFonjV03445F5L+QWa3SalZoliq4FidTABy2px
      L/clOwfLWHqSh1v/Ss06W8MdfQMQ8Sj83VcfM56e5unWV/zL2hYX0mnAQ8inMzc+x6WRcb5c
      /pyFSo+JoPcEyxZH6a3R6yzvfkGpC3vlJ+z0vCSe7xkjyUtsFxdpdztEjRh+jz7YYo9Y3y6Q
      z4jzznCWny19hj86zlxQ5aeru0zEYvzjVz8hElqAToFzo28RNjf5tGKeZN3iyGh07R5zw1fZ
      KC6TiU1h1laoahFiWodOa5diqwWtZRKZeVb3Hw+64CP12mFQcTbJMKicDSpE/wDcvvA+f3rz
      97k9MoriCfE//vhvCD6f99HVf89fvPNj5uJvdvKU+C7zcHvyfb4/+0OyoQwfTL3PR1PvAaBp
      fq6PvsMfzv8ZKe/Z/Kzsu1VJv59PnnzBzPAFPjh/g0e5tRcLRzzwyeoCl0ZmT6hMcWxUA82u
      82g/z/zQHKXaOjUtRJSvR4Husl/ZpNA9m2PcfQPwyco95sfmMG2bZCDA+ZE5zqeHAPi39SWu
      jp6n3qqcWKHimNh1npYPmIpn2Sw+pO4ESHs9tJ/PzsQvsl9aGmiJx6nvKFDYCGOoXf7x4edU
      uhbj6cfkCwdMxFL4AlEwi3y8tnKStYpjEvKFaTfXWa7WuTw8xaPtL7C9EWJ0UHtlNhr1QZd4
      bPoGIFdYJVdYfTG9uf8MgGflApQLPD3+2sQJWdt/+OLxg+27Lx6XAbo7J1/QCTqbRzZCvCEJ
      gHA1CYBwNQmAcDUJgHA1CYBwNQmAcDUJgHA1CYBwNQmAcDUJgHA1CYBwNQmAcDUJgHA1CYBw
      NQmAcDUJgHA1CYBwNQmAcDUJgHA1CYBwNQmAcDUJgHA1CYBwNQmAcDUJgHA1CYBwNQmAcDUJ
      gHA1CYBwNQmAcDUJgHA1CYBwNQmAcDUJgHA1CYBwNQmAcDUJgHA1CYBwNQmAcDUJgHA1CYBw
      NQmAcDUJgHA1CYBwNQmAcDUJgHA1CYBwNQmAcDUJgHA1CYBwNQmAcDUJgHA1CYBwNQmAcDUJ
      gHA1z0sTmsZ//dEfD6oWcYLGExk2VxYHXcbAvRQA27H57NndQdUiTpDhe3fQJXwnSBdIuJoE
      QLha3wBcGrnOf7n918wlR9BUDa/mZTicRlM9+L0GCgrZcApQCfrC3MjO4dV0DI8XAJ/H4J3x
      64d/RNEIeA0UeL6M/mKZd8evAQrzo9f5z7f/I+fjQ3g0HZ/mIRab43w0gkdRUVUPfq8PAI+m
      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
    </thumbnail>
    <thumbnail height='192' name='bad 10' width='192'>
      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
      Rfic/wfqHVMqd4NjRwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='bad AQI ' width='192'>
      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
      6upsRAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='good 10' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='per capita map' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='top 10 with bad emission' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAFnUlEQVR4nO3aS29UZQDG8WfuvUxnekfAQlMQiBJJIUEkQjASTUxkI4lx5Rcwxq07v4ff
      wJUaSUyMERMTA7EKdWFssQWh0BudKTPt3JhzXKABFicumJ5JfP6/3Zl382z+MydvJhGGYSjA
      VLLbA4BuIgBYSz/5EIahgnqjW1uA2D0VQFBr6Nsjb3VrCxA7XoFgjQBgLTqAVFZDZ15R//5R
      5XaNPPosk1N2tBDTNGDnRQYwfP60tn+bVX2tqqFzpzV2/qRSubSSmaQGjh/T2PlTSvf3aPjs
      KRVf2hfnZqBjIgNIJwM1yjW1t+tql+/rwXKg/ERe/RPDyo0PaHOupP6pMaXzOY28Nh3nZqBj
      0lEH1Tsl7b5wTlvzf6q9ta2gJSkphUGoYGtbQeuhUoURZfJZhQpinAx0TuLJv0K0t+tcg8IK
      t0CwRgCwFhlAbmpKUx9elCSNXXhTu997R70juUeHqZwmP/lIfcNJ7f3gXY29cVKZkRGNv31W
      E++fj2U40AmRATQWFlRZWJHUp3Dznpa/vKLeA3slSYNnTmjzp2tSKqPW+obSgwWFlQ2Vry+q
      sVaKazvwzCJvgR5rKjVQVHYioeDBkqS00j0Z9U4dVLa1pPLVX5Q5PK38oX3KjBS0+t3Mjo8G
      OiXyF6Dv0GElw4QGj+5R6dot9Q+1VFnPafDYHq1/84Puff6V7s8sKjsxqcz2HVVXm0rkCho9
      fTTO/cAz4RoU1rgFgjUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUC
      gDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUC
      gDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUC
      gDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUC
      gDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUC
      gDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUCgDUC
      gDUCgDUCgDUCgDUCgDUCgLX0kw/JTFLTH7/erS1A7J4KQGGg3vWfuzQFiB+vQLBGALAWGcCV
      pQ2FYajZWyUtbFT09dyKri5XpKCtz2ZuqxWGce4EdkRkANVmW5K03XyoWrutZigdGOrT3VJV
      x3f1arb8MLaRwE5JRx2kFKoRSk2F2j9c0KGhUF/Mr6qYaKuWSKteKenE0HicW4GOiwzg1O6C
      vr+xql2DedW3avpxpaojYwX1JqSDI/26sVGNcyewIxJh+PhlPmzWVfn0Yjf3ALHiFgjWIgNY
      36zq0vyK/tisS5KCINDs3U01Jc3cXtOluWX9XqqrvLWt+VIjrr1AR0UGcH2toucLfdo/kJMk
      VepNLa5uqSHpxMSYXh7uUTqV1FqtoZtrtbj2Ah0VGcCrE6MazkqXF0uSpGJfj/b0Z/45DTVf
      aelgIasXRvuVSiTi2Ap0XOQt0FJ5S3Plmor5vP4q15RWW1eXN1Xuy2q6L6HxoaISQVuXb67r
      15WmXpzI67meVJzbgWf2n7dAYdDWrUpLk8We2McBOy3yF+BfiWRKk0W+2fH/xDUorBEArBEA
      rBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEA
      rBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEArBEA
      rBEArBEArBEArBEArBEArBEArBEArKWfekomlT5ysktTgPj9DbDYOXPQpxbEAAAAAElFTkSu
      QmCC
    </thumbnail>
  </thumbnails>
</workbook>
